{"version":3,"sources":["timer.js"],"names":["refs","startBtn","document","querySelector","stopBtn","clockFase","Timer","constructor","onTick","intervalID","isActive","init","time","getTimeComponet","start","timeStart","Date","now","setInterval","curentTime","deltaTime","stop","clearInterval","hours","pad","Math","floor","mins","secs","value","String","padStart","updateClockFace","textContent","timer","addEventListener","bind"],"mappings":";AAAA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,uBACjCC,QAASF,SAASC,cAAc,sBAChCE,UAAWH,SAASC,cAAc,kBAGpC,MAAMG,EACJC,aAAY,OAAEC,IACPC,KAAAA,WAAa,KACbC,KAAAA,UAAW,EACXF,KAAAA,OAASA,EACTG,KAAAA,OAEPA,OACQC,MAAAA,EAAO,KAAKC,gBAAgB,GAC7BL,KAAAA,OAAOI,GAGdE,QACM,GAAA,KAAKJ,SACP,OAEIK,MAAAA,EAAYC,KAAKC,MAClBP,KAAAA,UAAW,EAEXD,KAAAA,WAAaS,YAAY,KACtBC,MACAC,EADaJ,KAAKC,MACOF,EACzBH,EAAO,KAAKC,gBAAgBO,GAG7BZ,KAAAA,OAAOI,IACX,KAELS,OACEC,cAAc,KAAKb,YACdC,KAAAA,UAAW,EACVE,MAAAA,EAAO,KAAKC,gBAAgB,GAC7BL,KAAAA,OAAOI,GAEdC,gBAAgBD,GAIP,MAAA,CAAEW,MAHK,KAAKC,IAAIC,KAAKC,MAAOd,EAAQ,MAAyB,OAGpDe,KAFH,KAAKH,IAAIC,KAAKC,MAAOd,EAAQ,KAAoB,MAExCgB,KADT,KAAKJ,IAAIC,KAAKC,MAAOd,EAAQ,IAAc,OAG1DY,IAAIK,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,SAASC,GAAgB,MAAET,EAAF,KAASI,EAAT,KAAeC,IACtC5B,EAAKK,UAAU4B,eAAiBV,KAASI,KAAQC,IAGnD,MAAMM,EAAQ,IAAI5B,EAAM,CACtBE,OAAQwB,IAGVhC,EAAKC,SAASkC,iBAAiB,QAASD,EAAMpB,MAAMsB,KAAKF,IAEzDlC,EAAKI,QAAQ+B,iBAAiB,QAASD,EAAMb,KAAKe,KAAKF","file":"timer.f193da32.js","sourceRoot":"../src","sourcesContent":["const refs = {\n  startBtn: document.querySelector('[data-action-start]'),\n  stopBtn: document.querySelector('[data-action-stop]'),\n  clockFase: document.querySelector('.js-clockface'),\n};\n\nclass Timer {\n  constructor({ onTick }) {\n    this.intervalID = null;\n    this.isActive = false;\n    this.onTick = onTick;\n    this.init();\n  }\n  init() {\n    const time = this.getTimeComponet(0);\n    this.onTick(time);\n  }\n\n  start() {\n    if (this.isActive) {\n      return;\n    }\n    const timeStart = Date.now();\n    this.isActive = true;\n\n    this.intervalID = setInterval(() => {\n      const curentTime = Date.now();\n      const deltaTime = curentTime - timeStart;\n      const time = this.getTimeComponet(deltaTime);\n      // console.log(time);\n\n      this.onTick(time);\n    }, 1000);\n  }\n  stop() {\n    clearInterval(this.intervalID);\n    this.isActive = false;\n    const time = this.getTimeComponet(0);\n    this.onTick(time);\n  }\n  getTimeComponet(time) {\n    const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    return { hours, mins, secs };\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nfunction updateClockFace({ hours, mins, secs }) {\n  refs.clockFase.textContent = `${hours}:${mins}:${secs}`;\n}\n\nconst timer = new Timer({\n  onTick: updateClockFace,\n});\n\nrefs.startBtn.addEventListener('click', timer.start.bind(timer));\n\nrefs.stopBtn.addEventListener('click', timer.stop.bind(timer));\n\n// const date = new Date();\n\n// const timer = {\n//   intervalID: null,\n//   isActive: false,\n//   start() {\n//     if (this.isActive) {\n//       return;\n//     }\n//     const timeStart = Date.now();\n//     this.isActive = true;\n\n//     this.intervalID = setInterval(() => {\n//       const curentTime = Date.now();\n//       const deltaTime = curentTime - timeStart;\n//       const { hours, mins, secs } = getTimeComponet(deltaTime);\n//       console.log(`${hours}:${mins}:${secs}`);\n//       updateClockFace(hours, mins, secs);\n//     }, 1000);\n//   },\n//   stop() {\n//     clearInterval(this.intervalID);\n//     this.isActive = false;\n//   },\n// };\n// // timer.start();\n\n// function pad(value) {\n//   return String(value).padStart(2, '0');\n// }\n\n// function getTimeComponet(time) {\n//   const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//   const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//   const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n//   return { hours, mins, secs };\n// }\n"]}