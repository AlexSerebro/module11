{"version":3,"sources":["../node_modules/bootstrap.native/dist/bootstrap-native.esm.js","index.js"],"names":["mouseclickEvent","transitionEndEvent","transitionDelay","transitionProperty","getElementStyle","element","property","computedStyle","getComputedStyle","getElementTransitionDelay","propertyValue","delayValue","delayScale","includes","duration","parseFloat","Number","isNaN","transitionDuration","getElementTransitionDuration","durationValue","durationScale","on","eventName","handler","options","ops","addEventListener","off","removeEventListener","emulateTransitionEnd","called","endEvent","Event","delay","transitionEndWrapper","e","target","apply","setTimeout","dispatchEvent","getDocument","node","HTMLElement","ownerDocument","Window","document","window","parentNodes","Document","Node","Element","elementNodes","querySelector","selector","parent","selectorIsString","lookUp","some","x","closest","getRootNode","host","ObjectAssign","obj","source","Object","assign","hasClass","classNAME","classList","contains","removeClass","remove","event","componentData","Map","Data","set","component","instance","has","get","getAllFor","instanceMap","allForC","delete","size","getInstance","OriginalEvent","EventType","config","OriginalCustomEvent","CustomEvent","cancelable","bubbles","fadeClass","showClass","dataBsDismiss","alertString","alertComponent","getAttribute","attribute","normalizeValue","value","ObjectKeys","keys","toLowerCase","normalizeOptions","defaultOps","inputOps","ns","data","dataset","normalOps","dataOps","forEach","k","key","replace","match","version","Version","BaseComponent","constructor","self","Error","name","prevInstance","dispose","defaults","length","prop","alertSelector","alertDismissSelector","getAlertInstance","alertInitCallback","Alert","closeAlertEvent","closedAlertEvent","alertTransitionEnd","toggleAlertHandler","add","action","dismiss","close","defaultPrevented","init","ariaPressed","setAttribute","addClass","activeClass","dataBsToggle","buttonString","buttonComponent","buttonSelector","getButtonInstance","buttonInitCallback","Button","toggleButtonHandler","toggle","isActive","preventDefault","mouseenterEvent","mouseleaveEvent","keydownEvent","touchmoveEvent","touchendEvent","touchstartEvent","keyArrowLeft","keyArrowRight","getWindow","defaultView","getBoundingClientRect","includeScale","width","height","top","right","bottom","left","scaleX","scaleY","offsetWidth","offsetHeight","Math","round","y","getDocumentElement","documentElement","isElementInScrollRange","clientHeight","isRTL","dir","querySelectorAll","getElementsByClassName","TimeCache","Timer","callback","keyTimers","clear","clearTimeout","reflow","passiveHandler","passive","dataBsTarget","carouselString","carouselComponent","dataBsParent","dataBsContainer","getTargetElement","targetAttr","doc","map","att","attValue","filter","carouselSelector","carouselItem","dataBsSlideTo","dataBsSlide","pausedClass","carouselDefaults","pause","keyboard","touch","interval","getCarouselInstance","carouselInitCallback","Carousel","startX","currentX","endX","carouselSlideEvent","carouselSlidEvent","carouselTransitionEndHandler","index","direction","slides","isAnimating","activeItem","getActiveIndex","orientation","directionClass","hidden","isPaused","cycle","carouselPauseHandler","carouselResumeHandler","carouselIndicatorHandler","indicator","newIndex","to","carouselControlsHandler","control","next","prev","carouselKeyHandler","code","RTL","arrowKeyNext","carouselTouchDownHandler","isTouch","changedTouches","pageX","toggleCarouselTouchHandlers","carouselTouchMoveHandler","type","carouselTouchEndHandler","relatedTarget","abs","activateCarouselIndicator","pageIndex","indicators","toggleCarouselHandlers","controls","arrow","indexOf","id","idx","eventProperties","from","itemClasses","slide","c","ariaExpanded","collapsingClass","collapseString","collapseComponent","collapseSelector","collapseToggleSelector","collapseDefaults","getCollapseInstance","collapseInitCallback","Collapse","showCollapseEvent","shownCollapseEvent","hideCollapseEvent","hiddenCollapseEvent","expandCollapse","triggers","style","scrollHeight","btn","collapseContent","toggleCollapseHandler","collapseClickHandler","trigger","tagName","hide","show","activeCollapse","activeCollapseInstance","find","i","focusEvent","keyupEvent","scrollEvent","resizeEvent","keyArrowUp","keyArrowDown","keyEscape","hasAttribute","setElementStyle","styles","focus","dropdownMenuClasses","dropdownComponent","dropdownMenuClass","isEmptyAnchor","parentAnchor","href","slice","dropdownString","dropupString","dropstartString","dropendString","dropdownSelector","getDropdownInstance","dropdownInitCallback","Dropdown","dropdownMenuEndClass","verticalClass","horizontalClass","menuFocusTags","dropdownDefaults","offset","display","showDropdownEvent","shownDropdownEvent","hideDropdownEvent","hiddenDropdownEvent","styleDropdown","menu","parentElement","menuEnd","p","positionClass","dropdownMargin","dropdown","dropup","dropstart","dropend","dropdownPosition","menuWidth","menuHeight","clientWidth","targetLeft","targetTop","targetWidth","targetHeight","leftFullExceed","rightFullExceed","bottomExceed","bottomFullExceed","topExceed","leftExceed","rightExceed","margin","join","getMenuItems","children","firstElementChild","toggleDropdownDismiss","open","dropdownDismissHandler","dropdownPreventScroll","dropdownKeyHandler","ev","dropdownLayoutHandler","toggleDropdownHandler","dropdownClickHandler","getCurrentOpenDropdown","currentParent","hasData","isForm","activeElement","menuItems","currentElement","currentInstance","ariaHidden","ariaModal","removeAttribute","getDocumentBody","body","modalString","modalComponent","isShadowRoot","ShadowRoot","getParentNode","nodeName","assignedSlot","parentNode","isTableElement","isHTMLElement","getElementContainer","getOffset","majorBlockTags","offsetParent","win","containers","shadowRoot","push","every","r","fixedTopClass","fixedBottomClass","stickyTopClass","positionStickyClass","getFixedItems","resetScrollbar","bd","paddingRight","overflow","fixedItems","fixed","marginRight","measureScrollbar","innerWidth","setScrollbar","bodyPad","parseInt","sbWidth","itemPadValue","itemMValue","offcanvasString","backdropString","modalBackdropClass","offcanvasBackdropClass","modalActiveSelector","offcanvasActiveSelector","overlay","createElement","getCurrentOpen","toggleOverlayType","isModal","targetClass","appendOverlay","container","hasFade","append","showOverlay","hideOverlay","removeOverlay","isVisible","modalSelector","modalToggleSelector","modalDismissSelector","modalStaticClass","modalDefaults","backdrop","getModalInstance","modalInitCallback","Modal","showModalEvent","shownModalEvent","hideModalEvent","hiddenModalEvent","setModalScrollbar","scrollbarWidth","modalHeight","modalScrollHeight","modalOverflow","pad","toggleModalDismiss","modalDismissHandler","update","modalKeyHandler","toggleModalHandler","modalClickHandler","afterModalHide","visibleTrigger","afterModalShow","beforeModalShow","beforeModalHide","force","isStatic","modalDialog","selectedText","getSelection","toString","targetInsideDialog","staticTransitionEnd","bind","overlayDelay","currentOpen","offcanvasComponent","offcanvasSelector","offcanvasToggleSelector","offcanvasDismissSelector","offcanvasTogglingClass","offcanvasDefaults","scroll","getOffcanvasInstance","offcanvasInitCallback","Offcanvas","showOffcanvasEvent","shownOffcanvasEvent","hideOffcanvasEvent","hiddenOffcanvasEvent","setOffCanvasScrollbar","toggleOffcanvasEvents","offcanvasTriggerHandler","toggleOffCanvasDismiss","offcanvasKeyDismissHandler","offcanvasDismissHandler","beforeOffcanvasShow","visibility","showOffcanvasComplete","beforeOffcanvasHide","blur","hideOffcanvasComplete","offCanvasDismiss","selection","popoverString","popoverComponent","tooltipString","getTipTemplate","tipType","isTooltip","isMedia","SVGElement","HTMLImageElement","HTMLVideoElement","mediaType","getNodeScroll","isWin","scrollX","scrollLeft","scrollY","scrollTop","isScaledElement","getRectRelativeToOffsetParent","isParentAnElement","rect","offsets","offsetRect","clientLeft","clientTop","tipClassPositions","styleTip","tipClasses","tooltip","tipPositions","isPopover","tipWidth","tipHeight","windowWidth","windowHeight","placement","parentLeft","parentRight","parentWidth","parentPosition","staticParent","stickyFixedParent","rightBoundry","elemWidth","elemHeight","elemRectLeft","elemRectRight","elemRectTop","topPosition","leftPosition","rightPosition","arrowTop","arrowLeft","arrowRight","arrowWidth","arrowHeight","arrowAdjust","horizontal","vertical","className","eX","eY","pageY","clientX","offsetLeft","clientY","offsetTop","undefined","tooltipDefaults","template","title","customClass","sanitizeFn","animation","ariaDescribedBy","mousedownEvent","mousemoveEvent","focusinEvent","focusoutEvent","mousehoverEvent","userAgentData","uaDATA","navigator","userAgent","userAgentString","appleBrands","isApple","brands","test","brand","elementUID","elementIDMap","getUID","elMap","result","dataOriginalTitle","tooltipComponent","setHtml","content","dirty","trim","domParser","tempDocument","DOMParser","parseFromString","method","createTip","dismissible","tipString","btnClose","placementClass","popoverTemplate","htmlMarkup","cloneNode","bodyClass","tooltipHeader","tooltipBody","isVisibleTip","tip","tooltipSelector","titleAttr","getTooltipInstance","tooltipInitCallback","Tooltip","removeTooltip","disposeTooltipComplete","toggleTooltipHandlers","toggleTooltipTitle","toggleTooltipAction","tooltipTouchHandler","tooltipShownAction","shownTooltipEvent","tooltipHiddenAction","hiddenTooltipEvent","enabled","triggerOptions","split","elemIsMedia","tr","toggleTooltipOpenHandlers","parentModal","parentOffcanvas","scrollTarget","titleAtt","tipComponent","elem","idealContainer","outTimer","showTooltipEvent","hideTooltipEvent","enable","disable","toggleEnabled","popoverSelector","popoverDefaults","Popover","getPopoverInstance","popoverInitCallback","getElementsByTagName","scrollspyString","scrollspyComponent","scrollspySelector","scrollspyDefaults","getScrollSpyInstance","scrollspyInitCallback","ScrollSpy","activateScrollSpy","updateSpyTargets","itemsLength","links","scrollHEIGHT","getScrollHeight","targetItem","items","maxScroll","getOffsetHeight","link","charAt","innerHeight","item","activate","parents","parentItem","menuItem","parentLink","previousElementSibling","toggleSpyHandlers","refresh","newActiveItem","ariaSelected","tabString","tabComponent","tabSelector","getTabInstance","tabInitCallback","Tab","showTabEvent","shownTabEvent","hideTabEvent","hiddenTabEvent","tabPrivate","triggerTabEnd","tabContent","nav","triggerTabShow","currentHeight","nextHeight","tab","triggerTabHide","nextContent","getActiveTab","activeTabs","toggleTabHandler","tabClickHandler","toastString","toastComponent","toastSelector","toastDismissSelector","showingClass","hideClass","toastDefaults","autohide","getToastInstance","toastInitCallback","Toast","showToastEvent","shownToastEvent","hideToastEvent","hiddenToastEvent","showToastComplete","hideToastComplete","hideToast","showToast","toggleToastHandlers","interactiveToastHandler","completeDisposeToast","isCustomElement","getCustomElements","componentsList","componentsKeys","initComponentDataAPI","collection","removeComponentDataAPI","context","compData","initCallback","customElementList","comp","ce","removeDataAPI","once","BSN","refs","modal","subButton","PROMT_DELAY","MAX_PROMT_ATTEMPTS","promtCounter","hasSubscribed","openModal","console","log","onSubscribeBtnClick"],"mappings":"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","file":"src.a94ae23d.js","sourceRoot":"../src","sourcesContent":["/*!\n  * Native JavaScript for Bootstrap v4.1.0alpha2 (https://thednp.github.io/bootstrap.native/)\n  * Copyright 2015-2022 © dnp_theme\n  * Licensed under MIT (https://github.com/thednp/bootstrap.native/blob/master/LICENSE)\n  */\n/**\n * A global namespace for `click` event.\n * @type {string}\n */\nconst mouseclickEvent = 'click';\n\n/**\n * A global namespace for 'transitionend' string.\n * @type {string}\n */\nconst transitionEndEvent = 'transitionend';\n\n/**\n * A global namespace for 'transitionDelay' string.\n * @type {string}\n */\nconst transitionDelay = 'transitionDelay';\n\n/**\n * A global namespace for:\n * * `transitionProperty` string for Firefox,\n * * `transition` property for all other browsers.\n *\n * @type {string}\n */\nconst transitionProperty = 'transitionProperty';\n\n/**\n * Shortcut for `window.getComputedStyle(element).propertyName`\n * static method.\n *\n * * If `element` parameter is not an `HTMLElement`, `getComputedStyle`\n * throws a `ReferenceError`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} property the css property\n * @return {string} the css property value\n */\nfunction getElementStyle(element, property) {\n  const computedStyle = getComputedStyle(element);\n\n  // @ts-ignore -- must use camelcase strings,\n  // or non-camelcase strings with `getPropertyValue`\n  return property in computedStyle ? computedStyle[property] : '';\n}\n\n/**\n * Utility to get the computed `transitionDelay`\n * from Element in miliseconds.\n *\n * @param {HTMLElement | Element} element target\n * @return {number} the value in miliseconds\n */\nfunction getElementTransitionDelay(element) {\n  const propertyValue = getElementStyle(element, transitionProperty);\n  const delayValue = getElementStyle(element, transitionDelay);\n\n  const delayScale = delayValue.includes('ms') ? 1 : 1000;\n  const duration = propertyValue && propertyValue !== 'none'\n    ? parseFloat(delayValue) * delayScale : 0;\n\n  return !Number.isNaN(duration) ? duration : 0;\n}\n\n/**\n * A global namespace for 'transitionDuration' string.\n * @type {string}\n */\nconst transitionDuration = 'transitionDuration';\n\n/**\n * Utility to get the computed `transitionDuration`\n * from Element in miliseconds.\n *\n * @param {HTMLElement | Element} element target\n * @return {number} the value in miliseconds\n */\nfunction getElementTransitionDuration(element) {\n  const propertyValue = getElementStyle(element, transitionProperty);\n  const durationValue = getElementStyle(element, transitionDuration);\n  const durationScale = durationValue.includes('ms') ? 1 : 1000;\n  const duration = propertyValue && propertyValue !== 'none'\n    ? parseFloat(durationValue) * durationScale : 0;\n\n  return !Number.isNaN(duration) ? duration : 0;\n}\n\n/**\n * Add eventListener to an `Element` | `HTMLElement` | `Document` target.\n *\n * @param {HTMLElement | Element | Document | Window} element event.target\n * @param {string} eventName event.type\n * @param {EventListenerObject['handleEvent']} handler callback\n * @param {(EventListenerOptions | boolean)=} options other event options\n */\nfunction on(element, eventName, handler, options) {\n  const ops = options || false;\n  element.addEventListener(eventName, handler, ops);\n}\n\n/**\n * Remove eventListener from an `Element` | `HTMLElement` | `Document` | `Window` target.\n *\n * @param {HTMLElement | Element | Document | Window} element event.target\n * @param {string} eventName event.type\n * @param {EventListenerObject['handleEvent']} handler callback\n * @param {(EventListenerOptions | boolean)=} options other event options\n */\nfunction off(element, eventName, handler, options) {\n  const ops = options || false;\n  element.removeEventListener(eventName, handler, ops);\n}\n\n/**\n * Utility to make sure callbacks are consistently\n * called when transition ends.\n *\n * @param {HTMLElement | Element} element target\n * @param {EventListener} handler `transitionend` callback\n */\nfunction emulateTransitionEnd(element, handler) {\n  let called = 0;\n  const endEvent = new Event(transitionEndEvent);\n  const duration = getElementTransitionDuration(element);\n  const delay = getElementTransitionDelay(element);\n\n  if (duration) {\n    /**\n     * Wrap the handler in on -> off callback\n     * @param {TransitionEvent} e Event object\n     */\n    const transitionEndWrapper = (e) => {\n      if (e.target === element) {\n        handler.apply(element, [e]);\n        off(element, transitionEndEvent, transitionEndWrapper);\n        called = 1;\n      }\n    };\n    on(element, transitionEndEvent, transitionEndWrapper);\n    setTimeout(() => {\n      if (!called) element.dispatchEvent(endEvent);\n    }, duration + delay + 17);\n  } else {\n    handler.apply(element, [endEvent]);\n  }\n}\n\n/**\n * Returns the `document` or the `#document` element.\n * @see https://github.com/floating-ui/floating-ui\n * @param {(Node | HTMLElement | Element | globalThis)=} node\n * @returns {Document}\n */\nfunction getDocument(node) {\n  if (node instanceof HTMLElement) return node.ownerDocument;\n  if (node instanceof Window) return node.document;\n  return window.document;\n}\n\n/**\n * A global array of possible `ParentNode`.\n */\nconst parentNodes = [Document, Node, Element, HTMLElement];\n\n/**\n * A global array with `Element` | `HTMLElement`.\n */\nconst elementNodes = [Element, HTMLElement];\n\n/**\n * Utility to check if target is typeof `HTMLElement`, `Element`, `Node`\n * or find one that matches a selector.\n *\n * @param {HTMLElement | Element | string} selector the input selector or target element\n * @param {(HTMLElement | Element | Node | Document)=} parent optional node to look into\n * @return {(HTMLElement | Element)?} the `HTMLElement` or `querySelector` result\n */\nfunction querySelector(selector, parent) {\n  const selectorIsString = typeof selector === 'string';\n  const lookUp = parent && parentNodes.some((x) => parent instanceof x)\n    ? parent : getDocument();\n\n  if (!selectorIsString && [...elementNodes].some((x) => selector instanceof x)) {\n    return selector;\n  }\n  // @ts-ignore -- `ShadowRoot` is also a node\n  return selectorIsString ? lookUp.querySelector(selector) : null;\n}\n\n/**\n * Shortcut for `HTMLElement.closest` method which also works\n * with children of `ShadowRoot`. The order of the parameters\n * is intentional since they're both required.\n *\n * @see https://stackoverflow.com/q/54520554/803358\n *\n * @param {HTMLElement | Element} element Element to look into\n * @param {string} selector the selector name\n * @return {(HTMLElement | Element)?} the query result\n */\nfunction closest(element, selector) {\n  return element ? (element.closest(selector)\n    // @ts-ignore -- break out of `ShadowRoot`\n    || closest(element.getRootNode().host, selector)) : null;\n}\n\n/**\n * Shortcut for `Object.assign()` static method.\n * @param  {Record<string, any>} obj a target object\n * @param  {Record<string, any>} source a source object\n */\nconst ObjectAssign = (obj, source) => Object.assign(obj, source);\n\n/**\n * Check class in `HTMLElement.classList`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} classNAME to check\n * @return {boolean}\n */\nfunction hasClass(element, classNAME) {\n  return element.classList.contains(classNAME);\n}\n\n/**\n * Remove class from `HTMLElement.classList`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} classNAME to remove\n */\nfunction removeClass(element, classNAME) {\n  element.classList.remove(classNAME);\n}\n\n/**\n * Shortcut for the `Element.dispatchEvent(Event)` method.\n *\n * @param {HTMLElement | Element} element is the target\n * @param {Event} event is the `Event` object\n */\nconst dispatchEvent = (element, event) => element.dispatchEvent(event);\n\n/** @type {Map<string, Map<HTMLElement | Element, Record<string, any>>>} */\nconst componentData = new Map();\n/**\n * An interface for web components background data.\n * @see https://github.com/thednp/bootstrap.native/blob/master/src/components/base-component.js\n */\nconst Data = {\n  /**\n   * Sets web components data.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string} component the component's name or a unique key\n   * @param {Record<string, any>} instance the component instance\n   */\n  set: (target, component, instance) => {\n    const element = querySelector(target);\n    if (!element) return;\n\n    if (!componentData.has(component)) {\n      componentData.set(component, new Map());\n    }\n\n    const instanceMap = componentData.get(component);\n    // @ts-ignore - not undefined, but defined right above\n    instanceMap.set(element, instance);\n  },\n\n  /**\n   * Returns all instances for specified component.\n   * @param {string} component the component's name or a unique key\n   * @returns {Map<HTMLElement | Element, Record<string, any>>?} all the component instances\n   */\n  getAllFor: (component) => {\n    const instanceMap = componentData.get(component);\n\n    return instanceMap || null;\n  },\n\n  /**\n   * Returns the instance associated with the target.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string} component the component's name or a unique key\n   * @returns {Record<string, any>?} the instance\n   */\n  get: (target, component) => {\n    const element = querySelector(target);\n    const allForC = Data.getAllFor(component);\n    const instance = element && allForC && allForC.get(element);\n\n    return instance || null;\n  },\n\n  /**\n   * Removes web components data.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string} component the component's name or a unique key\n   */\n  remove: (target, component) => {\n    const element = querySelector(target);\n    const instanceMap = componentData.get(component);\n    if (!instanceMap || !element) return;\n\n    instanceMap.delete(element);\n\n    if (instanceMap.size === 0) {\n      componentData.delete(component);\n    }\n  },\n};\n\n/**\n * An alias for `Data.get()`.\n * @type {SHORTER.getInstance<any>}\n */\nconst getInstance = (target, component) => Data.get(target, component);\n\n/**\n * Returns a namespaced `CustomEvent` specific to each component.\n * @param {string} EventType Event.type\n * @param {Record<string, any>=} config Event.options | Event.properties\n * @returns {SHORTER.OriginalEvent} a new namespaced event\n */\nfunction OriginalEvent(EventType, config) {\n  const OriginalCustomEvent = new CustomEvent(EventType, {\n    cancelable: true, bubbles: true,\n  });\n\n  if (config instanceof Object) {\n    ObjectAssign(OriginalCustomEvent, config);\n  }\n  return OriginalCustomEvent;\n}\n\n/**\n * Global namespace for most components `fade` class.\n */\nconst fadeClass = 'fade';\n\n/**\n * Global namespace for most components `show` class.\n */\nconst showClass = 'show';\n\n/**\n * Global namespace for most components `dismiss` option.\n */\nconst dataBsDismiss = 'data-bs-dismiss';\n\n/** @type {string} */\nconst alertString = 'alert';\n\n/** @type {string} */\nconst alertComponent = 'Alert';\n\n/**\n * Shortcut for `HTMLElement.getAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n */\nconst getAttribute = (element, attribute) => element.getAttribute(attribute);\n\n/**\n * The raw value or a given component option.\n *\n * @typedef {string | HTMLElement | Function | number | boolean | null} niceValue\n */\n\n/**\n * Utility to normalize component options\n *\n * @param {any} value the input value\n * @return {niceValue} the normalized value\n */\nfunction normalizeValue(value) {\n  if (value === 'true') { // boolean\n    return true;\n  }\n\n  if (value === 'false') { // boolean\n    return false;\n  }\n\n  if (!Number.isNaN(+value)) { // number\n    return +value;\n  }\n\n  if (value === '' || value === 'null') { // null\n    return null;\n  }\n\n  // string / function / HTMLElement / object\n  return value;\n}\n\n/**\n * Shortcut for `Object.keys()` static method.\n * @param  {Record<string, any>} obj a target object\n * @returns {string[]}\n */\nconst ObjectKeys = (obj) => Object.keys(obj);\n\n/**\n * Shortcut for `String.toLowerCase()`.\n *\n * @param {string} source input string\n * @returns {string} lowercase output string\n */\nconst toLowerCase = (source) => source.toLowerCase();\n\n/**\n * Utility to normalize component options.\n *\n * @param {HTMLElement | Element} element target\n * @param {Record<string, any>} defaultOps component default options\n * @param {Record<string, any>} inputOps component instance options\n * @param {string=} ns component namespace\n * @return {Record<string, any>} normalized component options object\n */\nfunction normalizeOptions(element, defaultOps, inputOps, ns) {\n  // @ts-ignore -- our targets are always `HTMLElement`\n  const data = { ...element.dataset };\n  /** @type {Record<string, any>} */\n  const normalOps = {};\n  /** @type {Record<string, any>} */\n  const dataOps = {};\n  const title = 'title';\n\n  ObjectKeys(data).forEach((k) => {\n    const key = ns && k.includes(ns)\n      ? k.replace(ns, '').replace(/[A-Z]/, (match) => toLowerCase(match))\n      : k;\n\n    dataOps[key] = normalizeValue(data[k]);\n  });\n\n  ObjectKeys(inputOps).forEach((k) => {\n    inputOps[k] = normalizeValue(inputOps[k]);\n  });\n\n  ObjectKeys(defaultOps).forEach((k) => {\n    if (k in inputOps) {\n      normalOps[k] = inputOps[k];\n    } else if (k in dataOps) {\n      normalOps[k] = dataOps[k];\n    } else {\n      normalOps[k] = k === title\n        ? getAttribute(element, title)\n        : defaultOps[k];\n    }\n  });\n\n  return normalOps;\n}\n\nvar version = \"4.1.0alpha2\";\n\nconst Version = version;\n\n/* Native JavaScript for Bootstrap 5 | Base Component\n----------------------------------------------------- */\n\n/** Returns a new `BaseComponent` instance. */\nclass BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target `Element` or selector string\n   * @param {BSN.ComponentOptions=} config component instance options\n   */\n  constructor(target, config) {\n    const self = this;\n    const element = querySelector(target);\n\n    if (!element) {\n      throw Error(`${self.name} Error: \"${target}\" is not a valid selector.`);\n    }\n\n    /** @static @type {BSN.ComponentOptions} */\n    self.options = {};\n\n    const prevInstance = Data.get(element, self.name);\n    if (prevInstance) prevInstance.dispose();\n\n    /** @type {HTMLElement | Element} */\n    self.element = element;\n\n    if (self.defaults && Object.keys(self.defaults).length) {\n      self.options = normalizeOptions(element, self.defaults, (config || {}), 'bs');\n    }\n\n    Data.set(element, self.name, self);\n  }\n\n  /* eslint-disable */\r\n  /** @static */\r\n  get version() { return Version; }\r\n  /* eslint-enable */\n\n  /** @static */\n  get name() { return this.constructor.name; }\n\n  /** @static */\n  // @ts-ignore\n  get defaults() { return this.constructor.defaults; }\n\n  /**\n   * Removes component from target element;\n   */\n  dispose() {\n    const self = this;\n    Data.remove(self.element, self.name);\n    // @ts-ignore\n    ObjectKeys(self).forEach((prop) => { self[prop] = null; });\n  }\n}\n\n/* Native JavaScript for Bootstrap 5 | Alert\n-------------------------------------------- */\n\n// ALERT PRIVATE GC\n// ================\nconst alertSelector = `.${alertString}`;\nconst alertDismissSelector = `[${dataBsDismiss}=\"${alertString}\"]`;\n\n/**\n * Static method which returns an existing `Alert` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Alert>}\n */\nconst getAlertInstance = (element) => getInstance(element, alertComponent);\n\n/**\n* An `Alert` initialization callback.\n* @type {BSN.InitCallback<Alert>}\n*/\nconst alertInitCallback = (element) => new Alert(element);\n\n// ALERT CUSTOM EVENTS\n// ===================\nconst closeAlertEvent = OriginalEvent(`close.bs.${alertString}`);\nconst closedAlertEvent = OriginalEvent(`closed.bs.${alertString}`);\n\n// ALERT EVENT HANDLER\n// ===================\n/**\n * Alert `transitionend` callback.\n * @param {Alert} self target Alert instance\n */\nfunction alertTransitionEnd(self) {\n  const { element } = self;\n  toggleAlertHandler(self);\n\n  dispatchEvent(element, closedAlertEvent);\n\n  self.dispose();\n  element.remove();\n}\n\n// ALERT PRIVATE METHOD\n// ====================\n/**\n * Toggle on / off the `click` event listener.\n * @param {Alert} self the target alert instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleAlertHandler(self, add) {\n  const action = add ? on : off;\n  const { dismiss } = self;\n  if (dismiss) action(dismiss, mouseclickEvent, self.close);\n}\n\n// ALERT DEFINITION\n// ================\n/** Creates a new Alert instance. */\nclass Alert extends BaseComponent {\n  /** @param {HTMLElement | Element | string} target element or selector */\n  constructor(target) {\n    super(target);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n\n    // the dismiss button\n    /** @static @type {(HTMLElement | Element)?} */\n    self.dismiss = querySelector(alertDismissSelector, element);\n\n    // add event listener\n    toggleAlertHandler(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return alertComponent; }\r\n  /* eslint-enable */\n\n  // ALERT PUBLIC METHODS\n  // ====================\n  /**\n   * Public method that hides the `.alert` element from the user,\n   * disposes the instance once animation is complete, then\n   * removes the element from the DOM.\n   *\n   * @param {Event=} e most likely the `click` event\n   * @this {Alert} the `Alert` instance or `EventTarget`\n   */\n  close(e) {\n    // @ts-ignore\n    const self = e ? getAlertInstance(closest(this, alertSelector)) : this;\n    if (!self) return;\n    const { element } = self;\n\n    if (hasClass(element, showClass)) {\n      dispatchEvent(element, closeAlertEvent);\n      if (closeAlertEvent.defaultPrevented) return;\n\n      removeClass(element, showClass);\n\n      if (hasClass(element, fadeClass)) {\n        emulateTransitionEnd(element, () => alertTransitionEnd(self));\n      } else alertTransitionEnd(self);\n    }\n  }\n\n  /** Remove the component from target element. */\n  dispose() {\n    toggleAlertHandler(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(Alert, {\n  selector: alertSelector,\n  init: alertInitCallback,\n  getInstance: getAlertInstance,\n});\n\n/**\n * A global namespace for aria-pressed.\n * @type {string}\n */\nconst ariaPressed = 'aria-pressed';\n\n/**\n * Shortcut for `HTMLElement.setAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n * @param  {string} value attribute value\n */\nconst setAttribute = (element, attribute, value) => element.setAttribute(attribute, value);\n\n/**\n * Add class to `HTMLElement.classList`.\n *\n * @param {HTMLElement | Element} element target\n * @param {string} classNAME to add\n */\nfunction addClass(element, classNAME) {\n  element.classList.add(classNAME);\n}\n\n/**\n * Global namespace for most components active class.\n */\nconst activeClass = 'active';\n\n/**\n * Global namespace for most components `toggle` option.\n */\nconst dataBsToggle = 'data-bs-toggle';\n\n/** @type {string} */\nconst buttonString = 'button';\n\n/** @type {string} */\nconst buttonComponent = 'Button';\n\n/* Native JavaScript for Bootstrap 5 | Button\n---------------------------------------------*/\n\n// BUTTON PRIVATE GC\n// =================\nconst buttonSelector = `[${dataBsToggle}=\"${buttonString}\"]`;\n\n/**\n * Static method which returns an existing `Button` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Button>}\n */\nconst getButtonInstance = (element) => getInstance(element, buttonComponent);\n\n/**\n * A `Button` initialization callback.\n * @type {BSN.InitCallback<Button>}\n */\nconst buttonInitCallback = (element) => new Button(element);\n\n// BUTTON PRIVATE METHOD\n// =====================\n/**\n * Toggles on/off the `click` event listener.\n * @param {Button} self the `Button` instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleButtonHandler(self, add) {\n  const action = add ? on : off;\n  action(self.element, mouseclickEvent, self.toggle);\n}\n\n// BUTTON DEFINITION\n// =================\n/** Creates a new `Button` instance. */\nclass Button extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target usually a `.btn` element\n   */\n  constructor(target) {\n    super(target);\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n\n    // set initial state\n    /** @type {boolean} */\n    self.isActive = hasClass(element, activeClass);\n    setAttribute(element, ariaPressed, `${!!self.isActive}`);\n\n    // add event listener\n    toggleButtonHandler(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return buttonComponent; }\r\n  /* eslint-enable */\n\n  // BUTTON PUBLIC METHODS\n  // =====================\n  /**\n   * Toggles the state of the target button.\n   * @param {MouseEvent} e usually `click` Event object\n   */\n  toggle(e) {\n    if (e) e.preventDefault();\n    // @ts-ignore\n    const self = e ? getButtonInstance(this) : this;\n    if (!self) return;\n    const { element } = self;\n\n    if (hasClass(element, 'disabled')) return;\n    self.isActive = hasClass(element, activeClass);\n    const { isActive } = self;\n\n    const action = isActive ? removeClass : addClass;\n\n    action(element, activeClass);\n    setAttribute(element, ariaPressed, isActive ? 'false' : 'true');\n  }\n\n  /** Removes the `Button` component from the target element. */\n  dispose() {\n    toggleButtonHandler(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(Button, {\n  selector: buttonSelector,\n  init: buttonInitCallback,\n  getInstance: getButtonInstance,\n});\n\n/**\n * A global namespace for `mouseenter` event.\n * @type {string}\n */\nconst mouseenterEvent = 'mouseenter';\n\n/**\n * A global namespace for `mouseleave` event.\n * @type {string}\n */\nconst mouseleaveEvent = 'mouseleave';\n\n/**\n * A global namespace for `keydown` event.\n * @type {string}\n */\nconst keydownEvent = 'keydown';\n\n/**\n * A global namespace for `touchmove` event.\n * @type {string}\n */\nconst touchmoveEvent = 'touchmove';\n\n/**\n * A global namespace for `touchend` event.\n * @type {string}\n */\nconst touchendEvent = 'touchend';\n\n/**\n * A global namespace for `touchstart` event.\n * @type {string}\n */\nconst touchstartEvent = 'touchstart';\n\n/**\n * A global namespace for `ArrowLeft` key.\n * @type {string} e.which = 37 equivalent\n */\nconst keyArrowLeft = 'ArrowLeft';\n\n/**\n * A global namespace for `ArrowRight` key.\n * @type {string} e.which = 39 equivalent\n */\nconst keyArrowRight = 'ArrowRight';\n\n/**\n * Returns the `Window` object of a target node.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {(Node | HTMLElement | Element | Window)=} node target node\n * @returns {globalThis}\n */\nfunction getWindow(node) {\n  if (node == null) {\n    return window;\n  }\n\n  if (!(node instanceof Window)) {\n    const { ownerDocument } = node;\n    return ownerDocument ? ownerDocument.defaultView || window : window;\n  }\n\n  // @ts-ignore\n  return node;\n}\n\n/**\n * Returns the bounding client rect of a target `HTMLElement`.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element} element event.target\n * @param {boolean=} includeScale when *true*, the target scale is also computed\n * @returns {SHORTER.BoundingClientRect} the bounding client rect object\n */\nfunction getBoundingClientRect(element, includeScale) {\n  const {\n    width, height, top, right, bottom, left,\n  } = element.getBoundingClientRect();\n  let scaleX = 1;\n  let scaleY = 1;\n\n  if (includeScale && element instanceof HTMLElement) {\n    const { offsetWidth, offsetHeight } = element;\n    scaleX = offsetWidth > 0 ? Math.round(width) / offsetWidth || 1 : 1;\n    scaleY = offsetHeight > 0 ? Math.round(height) / offsetHeight || 1 : 1;\n  }\n\n  return {\n    width: width / scaleX,\n    height: height / scaleY,\n    top: top / scaleY,\n    right: right / scaleX,\n    bottom: bottom / scaleY,\n    left: left / scaleX,\n    x: left / scaleX,\n    y: top / scaleY,\n  };\n}\n\n/**\n * Returns the `document.documentElement` or the `<html>` element.\n *\n * @param {(Node | HTMLElement | Element | globalThis)=} node\n * @returns {HTMLElement | HTMLHtmlElement}\n */\nfunction getDocumentElement(node) {\n  return getDocument(node).documentElement;\n}\n\n/**\n * Utility to determine if an `HTMLElement`\n * is partially visible in viewport.\n *\n * @param {HTMLElement | Element} element target\n * @return {boolean} the query result\n */\nconst isElementInScrollRange = (element) => {\n  const { top, bottom } = getBoundingClientRect(element);\n  const { clientHeight } = getDocumentElement(element);\n  // checks bottom && top\n  return top <= clientHeight && bottom >= 0;\n};\n\n/**\n * Checks if a page is Right To Left.\n * @param {(HTMLElement | Element)=} node the target\n * @returns {boolean} the query result\n */\nconst isRTL = (node) => getDocumentElement(node).dir === 'rtl';\n\n/**\n * A shortcut for `(document|Element).querySelectorAll`.\n *\n * @param {string} selector the input selector\n * @param {(HTMLElement | Element | Document | Node)=} parent optional node to look into\n * @return {NodeListOf<HTMLElement | Element>} the query result\n */\nfunction querySelectorAll(selector, parent) {\n  const lookUp = parent && parentNodes\n    .some((x) => parent instanceof x) ? parent : getDocument();\n  // @ts-ignore -- `ShadowRoot` is also a node\n  return lookUp.querySelectorAll(selector);\n}\n\n/**\n * Shortcut for `HTMLElement.getElementsByClassName` method. Some `Node` elements\n * like `ShadowRoot` do not support `getElementsByClassName`.\n *\n * @param {string} selector the class name\n * @param {(HTMLElement | Element | Document)=} parent optional Element to look into\n * @return {HTMLCollectionOf<HTMLElement | Element>} the 'HTMLCollection'\n */\nfunction getElementsByClassName(selector, parent) {\n  const lookUp = parent && parentNodes.some((x) => parent instanceof x)\n    ? parent : getDocument();\n  return lookUp.getElementsByClassName(selector);\n}\n\n/** @type {Map<HTMLElement | Element, any>} */\nconst TimeCache = new Map();\n/**\n * An interface for one or more `TimerHandler`s per `Element`.\n * @see https://github.com/thednp/navbar.js/\n */\nconst Timer = {\n  /**\n   * Sets a new timeout timer for an element, or element -> key association.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {ReturnType<TimerHandler>} callback the callback\n   * @param {number} delay the execution delay\n   * @param {string=} key a unique\n   */\n  set: (target, callback, delay, key) => {\n    const element = querySelector(target);\n\n    if (!element) return;\n\n    if (key && key.length) {\n      if (!TimeCache.has(element)) {\n        TimeCache.set(element, new Map());\n      }\n      const keyTimers = TimeCache.get(element);\n      keyTimers.set(key, setTimeout(callback, delay));\n    } else {\n      TimeCache.set(element, setTimeout(callback, delay));\n    }\n  },\n\n  /**\n   * Returns the timer associated with the target.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string=} key a unique\n   * @returns {number?} the timer\n   */\n  get: (target, key) => {\n    const element = querySelector(target);\n\n    if (!element) return null;\n    const keyTimers = TimeCache.get(element);\n\n    if (key && key.length && keyTimers && keyTimers.get) {\n      return keyTimers.get(key) || null;\n    }\n    return keyTimers || null;\n  },\n\n  /**\n   * Clears the element's timer.\n   * @param {HTMLElement | Element | string} target target element\n   * @param {string=} key a unique key\n   */\n  clear: (target, key) => {\n    const element = querySelector(target);\n\n    if (!element) return;\n\n    if (key && key.length) {\n      const keyTimers = TimeCache.get(element);\n\n      if (keyTimers && keyTimers.get) {\n        clearTimeout(keyTimers.get(key));\n        keyTimers.delete(key);\n        if (keyTimers.size === 0) {\n          TimeCache.delete(element);\n        }\n      }\n    } else {\n      clearTimeout(TimeCache.get(element));\n      TimeCache.delete(element);\n    }\n  },\n};\n\n/**\n * Utility to force re-paint of an `HTMLElement` target.\n *\n * @param {HTMLElement | Element} element is the target\n * @return {number} the `Element.offsetHeight` value\n */\n// @ts-ignore\nconst reflow = (element) => element.offsetHeight;\n\n/**\n * A global namespace for most scroll event listeners.\n * @type {Partial<AddEventListenerOptions>}\n */\nconst passiveHandler = { passive: true };\n\n/**\n * Global namespace for most components `target` option.\n */\nconst dataBsTarget = 'data-bs-target';\n\n/** @type {string} */\nconst carouselString = 'carousel';\n\n/** @type {string} */\nconst carouselComponent = 'Carousel';\n\n/**\n * Global namespace for most components `parent` option.\n */\nconst dataBsParent = 'data-bs-parent';\n\n/**\n * Global namespace for most components `container` option.\n */\nconst dataBsContainer = 'data-bs-container';\n\n/**\n * Returns the `Element` that THIS one targets\n * via `data-bs-target`, `href`, `data-bs-parent` or `data-bs-container`.\n *\n * @param {HTMLElement | Element} element the target element\n * @returns {(HTMLElement | Element)?} the query result\n */\nfunction getTargetElement(element) {\n  const targetAttr = [dataBsTarget, dataBsParent, dataBsContainer, 'href'];\n  const doc = getDocument(element);\n\n  return targetAttr.map((att) => {\n    const attValue = getAttribute(element, att);\n    if (attValue) {\n      return att === dataBsParent ? closest(element, attValue) : querySelector(attValue, doc);\n    }\n    return null;\n  }).filter((x) => x)[0];\n}\n\n/* Native JavaScript for Bootstrap 5 | Carousel\n----------------------------------------------- */\n\n// CAROUSEL PRIVATE GC\n// ===================\nconst carouselSelector = `[data-bs-ride=\"${carouselString}\"]`;\nconst carouselItem = `${carouselString}-item`;\nconst dataBsSlideTo = 'data-bs-slide-to';\nconst dataBsSlide = 'data-bs-slide';\n\nconst pausedClass = 'paused';\n\nconst carouselDefaults = {\n  pause: 'hover',\n  keyboard: false,\n  touch: true,\n  interval: 5000,\n};\n\n/**\n * Static method which returns an existing `Carousel` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Carousel>}\n */\nconst getCarouselInstance = (element) => getInstance(element, carouselComponent);\n\n/**\n * A `Carousel` initialization callback.\n * @type {BSN.InitCallback<Carousel>}\n */\nconst carouselInitCallback = (element) => new Carousel(element);\n\nlet startX = 0;\nlet currentX = 0;\nlet endX = 0;\n\n// CAROUSEL CUSTOM EVENTS\n// ======================\nconst carouselSlideEvent = OriginalEvent(`slide.bs.${carouselString}`);\nconst carouselSlidEvent = OriginalEvent(`slid.bs.${carouselString}`);\n\n// CAROUSEL EVENT HANDLERS\n// =======================\n/**\n * The `transitionend` event listener of the `Carousel`.\n * @param {Carousel} self the `Carousel` instance\n */\nfunction carouselTransitionEndHandler(self) {\n  const {\n    index, direction, element, slides, options,\n  } = self;\n\n  // discontinue disposed instances\n  if (self.isAnimating && getCarouselInstance(element)) {\n    const activeItem = getActiveIndex(self);\n    const orientation = direction === 'left' ? 'next' : 'prev';\n    const directionClass = direction === 'left' ? 'start' : 'end';\n\n    addClass(slides[index], activeClass);\n    removeClass(slides[activeItem], activeClass);\n\n    removeClass(slides[index], `${carouselItem}-${orientation}`);\n    removeClass(slides[index], `${carouselItem}-${directionClass}`);\n    removeClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n    dispatchEvent(element, carouselSlidEvent);\n    Timer.clear(element, dataBsSlide);\n\n    // check for element, might have been disposed\n    if (!getDocument(element).hidden && options.interval\n      && !self.isPaused) {\n      self.cycle();\n    }\n  }\n}\n\n/**\n * Handles the `mouseenter` / `touchstart` events when *options.pause*\n * is set to `hover`.\n *\n * @this {HTMLElement | Element}\n */\nfunction carouselPauseHandler() {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (self && !self.isPaused && !Timer.get(element, pausedClass)) {\n    addClass(element, pausedClass);\n  }\n}\n\n/**\n * Handles the `mouseleave` / `touchend` events when *options.pause*\n * is set to `hover`.\n *\n * @this {HTMLElement | Element}\n */\nfunction carouselResumeHandler() {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (self && self.isPaused && !Timer.get(element, pausedClass)) {\n    self.cycle();\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` indicators.\n *\n * @this {HTMLElement}\n * @param {MouseEvent} e the `Event` object\n */\nfunction carouselIndicatorHandler(e) {\n  e.preventDefault();\n  const indicator = this;\n  const element = closest(indicator, carouselSelector) || getTargetElement(indicator);\n  if (!element) return;\n  const self = getCarouselInstance(element);\n\n  if (!self || self.isAnimating) return;\n\n  // @ts-ignore\n  const newIndex = +getAttribute(indicator, dataBsSlideTo);\n\n  if (indicator && !hasClass(indicator, activeClass) // event target is not active\n    && !Number.isNaN(newIndex)) { // AND has the specific attribute\n    self.to(newIndex); // do the slide\n  }\n}\n\n/**\n * Handles the `click` event for the `Carousel` arrows.\n *\n * @this {HTMLElement}\n * @param {MouseEvent} e the `Event` object\n */\nfunction carouselControlsHandler(e) {\n  e.preventDefault();\n  const control = this;\n  const element = closest(control, carouselSelector) || getTargetElement(control);\n  const self = element && getCarouselInstance(element);\n  if (!self || self.isAnimating) return;\n  const orientation = getAttribute(control, dataBsSlide);\n\n  if (orientation === 'next') {\n    self.next();\n  } else if (orientation === 'prev') {\n    self.prev();\n  }\n}\n\n/**\n * Handles the keyboard `keydown` event for the visible `Carousel` elements.\n *\n * @param {KeyboardEvent} e the `Event` object\n */\nfunction carouselKeyHandler({ code }) {\n  const [element] = [...querySelectorAll(carouselSelector)]\n    .filter((x) => isElementInScrollRange(x));\n\n  const self = getCarouselInstance(element);\n  if (!self) return;\n  const RTL = isRTL();\n  const arrowKeyNext = !RTL ? keyArrowRight : keyArrowLeft;\n  const arrowKeyPrev = !RTL ? keyArrowLeft : keyArrowRight;\n\n  if (code === arrowKeyPrev) self.prev();\n  else if (code === arrowKeyNext) self.next();\n}\n\n// CAROUSEL TOUCH HANDLERS\n// =======================\n/**\n * Handles the `touchdown` event for the `Carousel` element.\n *\n * @this {HTMLElement | Element}\n * @param {TouchEvent} e the `Event` object\n */\nfunction carouselTouchDownHandler(e) {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (!self || self.isTouch) { return; }\n\n  startX = e.changedTouches[0].pageX;\n\n  // @ts-ignore\n  if (element.contains(e.target)) {\n    self.isTouch = true;\n    toggleCarouselTouchHandlers(self, true);\n  }\n}\n\n/**\n * Handles the `touchmove` event for the `Carousel` element.\n *\n * @this {HTMLElement | Element}\n * @param {TouchEvent} e\n */\nfunction carouselTouchMoveHandler(e) {\n  const { changedTouches, type } = e;\n  const self = getCarouselInstance(this);\n\n  if (!self || !self.isTouch) { return; }\n\n  currentX = changedTouches[0].pageX;\n\n  // cancel touch if more than one changedTouches detected\n  if (type === touchmoveEvent && changedTouches.length > 1) {\n    e.preventDefault();\n  }\n}\n\n/**\n * Handles the `touchend` event for the `Carousel` element.\n *\n * @this {HTMLElement | Element}\n\n * @param {TouchEvent} e\n */\nfunction carouselTouchEndHandler(e) {\n  const element = this;\n  const self = getCarouselInstance(element);\n\n  if (!self || !self.isTouch) { return; }\n\n  endX = currentX || e.changedTouches[0].pageX;\n\n  if (self.isTouch) {\n    // the event target is outside the carousel OR carousel doens't include the related target\n    // @ts-ignore\n    if ((!element.contains(e.target) || !element.contains(e.relatedTarget))\n      && Math.abs(startX - endX) < 75) { // AND swipe distance is less than 75px\n      // when the above conditions are satisfied, no need to continue\n      return;\n    } // OR determine next index to slide to\n    if (currentX < startX) {\n      self.index += 1;\n    } else if (currentX > startX) {\n      self.index -= 1;\n    }\n\n    self.isTouch = false;\n    self.to(self.index); // do the slide\n\n    toggleCarouselTouchHandlers(self); // remove touch events handlers\n  }\n}\n\n// CAROUSEL PRIVATE METHODS\n// ========================\n/**\n * Sets active indicator for the `Carousel` instance.\n * @param {Carousel} self the `Carousel` instance\n * @param {number} pageIndex the index of the new active indicator\n */\nfunction activateCarouselIndicator(self, pageIndex) {\n  const { indicators } = self;\n  [...indicators].forEach((x) => removeClass(x, activeClass));\n\n  if (self.indicators[pageIndex]) addClass(indicators[pageIndex], activeClass);\n}\n\n/**\n * Toggles the touch event listeners for a given `Carousel` instance.\n * @param {Carousel} self the `Carousel` instance\n * @param {boolean=} add when `TRUE` event listeners are added\n */\nfunction toggleCarouselTouchHandlers(self, add) {\n  const { element } = self;\n  const action = add ? on : off;\n  action(element, touchmoveEvent, carouselTouchMoveHandler, passiveHandler);\n  action(element, touchendEvent, carouselTouchEndHandler, passiveHandler);\n}\n\n/**\n * Toggles all event listeners for a given `Carousel` instance.\n * @param {Carousel} self the `Carousel` instance\n * @param {boolean=} add when `TRUE` event listeners are added\n */\nfunction toggleCarouselHandlers(self, add) {\n  const {\n    element, options, slides, controls, indicators,\n  } = self;\n  const {\n    touch, pause, interval, keyboard,\n  } = options;\n  const action = add ? on : off;\n\n  if (pause && interval) {\n    action(element, mouseenterEvent, carouselPauseHandler);\n    action(element, mouseleaveEvent, carouselResumeHandler);\n    action(element, touchstartEvent, carouselPauseHandler, passiveHandler);\n    action(element, touchendEvent, carouselResumeHandler, passiveHandler);\n  }\n\n  if (touch && slides.length > 1) {\n    action(element, touchstartEvent, carouselTouchDownHandler, passiveHandler);\n  }\n\n  if (controls.length) {\n    controls.forEach((arrow) => {\n      if (arrow) action(arrow, mouseclickEvent, carouselControlsHandler);\n    });\n  }\n\n  if (indicators.length) {\n    indicators.forEach((indicator) => {\n      action(indicator, mouseclickEvent, carouselIndicatorHandler);\n    });\n  }\n  // @ts-ignore\n  if (keyboard) action(getWindow(element), keydownEvent, carouselKeyHandler);\n}\n\n/**\n * Returns the index of the current active item.\n * @param {Carousel} self the `Carousel` instance\n * @returns {number} the query result\n */\nfunction getActiveIndex(self) {\n  const { slides, element } = self;\n  const activeItem = querySelector(`.${carouselItem}.${activeClass}`, element);\n  // @ts-ignore\n  return [...slides].indexOf(activeItem);\n}\n\n// CAROUSEL DEFINITION\n// ===================\n/** Creates a new `Carousel` instance. */\nclass Carousel extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target mostly a `.carousel` element\n   * @param {BSN.Options.Carousel=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // additional properties\n    /** @type {string} */\n    self.direction = isRTL() ? 'right' : 'left';\n    /** @type {number} */\n    self.index = 0;\n    /** @type {boolean} */\n    self.isTouch = false;\n\n    // initialization element\n    const { element } = self;\n    // carousel elements\n    // a LIVE collection is prefferable\n    self.slides = getElementsByClassName(carouselItem, element);\n    const { slides } = self;\n\n    // invalidate when not enough items\n    // no need to go further\n    if (slides.length < 2) { return; }\n\n    self.controls = [\n      ...querySelectorAll(`[${dataBsSlide}]`, element),\n      ...querySelectorAll(`[${dataBsSlide}][${dataBsTarget}=\"#${element.id}\"]`),\n    ];\n\n    /** @type {(HTMLElement | Element)?} */\n    self.indicator = querySelector(`.${carouselString}-indicators`, element);\n\n    // a LIVE collection is prefferable\n    /** @type {(HTMLElement | Element)[]} */\n    self.indicators = [\n      ...(self.indicator ? querySelectorAll(`[${dataBsSlideTo}]`, self.indicator) : []),\n      ...querySelectorAll(`[${dataBsSlideTo}][${dataBsTarget}=\"#${element.id}\"]`),\n    ];\n\n    // set JavaScript and DATA API options\n    const { options } = self;\n\n    // don't use TRUE as interval, it's actually 0, use the default 5000ms better\n    self.options.interval = options.interval === true\n      ? carouselDefaults.interval\n      : options.interval;\n\n    // set first slide active if none\n    if (getActiveIndex(self) < 0) {\n      if (slides.length) addClass(slides[0], activeClass);\n      if (self.indicators.length) activateCarouselIndicator(self, 0);\n    }\n\n    // attach event handlers\n    toggleCarouselHandlers(self, true);\n\n    // start to cycle if interval is set\n    if (options.interval) self.cycle();\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return carouselComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return carouselDefaults; }\r\n  /* eslint-enable */\n\n  /**\n   * Check if instance is paused.\n   * @returns {boolean}\n  */\n  get isPaused() {\n    return hasClass(this.element, pausedClass);\n  }\n\n  /**\n   * Check if instance is animating.\n   * @returns {boolean}\n  */\n  get isAnimating() {\n    return querySelector(`.${carouselItem}-next,.${carouselItem}-prev`, this.element) !== null;\n  }\n\n  // CAROUSEL PUBLIC METHODS\n  // =======================\n  /** Slide automatically through items. */\n  cycle() {\n    const self = this;\n    const { element, options, isPaused } = self;\n\n    Timer.clear(element, carouselString);\n    if (isPaused) {\n      Timer.clear(element, pausedClass);\n      removeClass(element, pausedClass);\n    }\n\n    Timer.set(element, () => {\n      if (!self.isPaused && isElementInScrollRange(element)) {\n        self.index += 1;\n        self.to(self.index);\n      }\n    }, options.interval, carouselString);\n  }\n\n  /** Pause the automatic cycle. */\n  pause() {\n    const self = this;\n    const { element, options } = self;\n    if (!self.isPaused && options.interval) {\n      addClass(element, pausedClass);\n      Timer.set(element, () => {}, 1, pausedClass);\n    }\n  }\n\n  /** Slide to the next item. */\n  next() {\n    const self = this;\n    if (!self.isAnimating) { self.index += 1; self.to(self.index); }\n  }\n\n  /** Slide to the previous item. */\n  prev() {\n    const self = this;\n    if (!self.isAnimating) { self.index -= 1; self.to(self.index); }\n  }\n\n  /**\n   * Jump to the item with the `idx` index.\n   * @param {number} idx the index of the item to jump to\n   */\n  to(idx) {\n    const self = this;\n    const {\n      element, slides, options,\n    } = self;\n    const activeItem = getActiveIndex(self);\n    const RTL = isRTL();\n    let next = idx;\n\n    // when controled via methods, make sure to check again\n    // first return if we're on the same item #227\n    if (self.isAnimating || activeItem === next) return;\n\n    // determine transition direction\n    if ((activeItem < next) || (activeItem === 0 && next === slides.length - 1)) {\n      self.direction = RTL ? 'right' : 'left'; // next\n    } else if ((activeItem > next) || (activeItem === slides.length - 1 && next === 0)) {\n      self.direction = RTL ? 'left' : 'right'; // prev\n    }\n    const { direction } = self;\n\n    // find the right next index\n    if (next < 0) { next = slides.length - 1; } else if (next >= slides.length) { next = 0; }\n\n    // orientation, class name, eventProperties\n    const orientation = direction === 'left' ? 'next' : 'prev';\n    const directionClass = direction === 'left' ? 'start' : 'end';\n\n    const eventProperties = {\n      relatedTarget: slides[next],\n      from: activeItem,\n      to: next,\n      direction,\n    };\n\n    // update event properties\n    ObjectAssign(carouselSlideEvent, eventProperties);\n    ObjectAssign(carouselSlidEvent, eventProperties);\n\n    // discontinue when prevented\n    dispatchEvent(element, carouselSlideEvent);\n    if (carouselSlideEvent.defaultPrevented) return;\n\n    // update index\n    self.index = next;\n    activateCarouselIndicator(self, next);\n\n    if (getElementTransitionDuration(slides[next]) && hasClass(element, 'slide')) {\n      Timer.set(element, () => {\n        addClass(slides[next], `${carouselItem}-${orientation}`);\n        reflow(slides[next]);\n        addClass(slides[next], `${carouselItem}-${directionClass}`);\n        addClass(slides[activeItem], `${carouselItem}-${directionClass}`);\n\n        emulateTransitionEnd(slides[next], () => carouselTransitionEndHandler(self));\n      }, 17, dataBsSlide);\n    } else {\n      addClass(slides[next], activeClass);\n      removeClass(slides[activeItem], activeClass);\n\n      Timer.set(element, () => {\n        Timer.clear(element, dataBsSlide);\n        // check for element, might have been disposed\n        if (element && options.interval && !self.isPaused) {\n          self.cycle();\n        }\n\n        dispatchEvent(element, carouselSlidEvent);\n      }, 17, dataBsSlide);\n    }\n  }\n\n  /** Remove `Carousel` component from target. */\n  dispose() {\n    const self = this;\n    const { slides } = self;\n    const itemClasses = ['start', 'end', 'prev', 'next'];\n\n    [...slides].forEach((slide, idx) => {\n      if (hasClass(slide, activeClass)) activateCarouselIndicator(self, idx);\n      itemClasses.forEach((c) => removeClass(slide, `${carouselItem}-${c}`));\n    });\n\n    toggleCarouselHandlers(self);\n    super.dispose();\n  }\n}\n\nObjectAssign(Carousel, {\n  selector: carouselSelector,\n  init: carouselInitCallback,\n  getInstance: getCarouselInstance,\n});\n\n/**\n * A global namespace for aria-expanded.\n * @type {string}\n */\nconst ariaExpanded = 'aria-expanded';\n\n/**\n * Global namespace for most components `collapsing` class.\n * As used by `Collapse` / `Tab`.\n */\nconst collapsingClass = 'collapsing';\n\n/** @type {string} */\nconst collapseString = 'collapse';\n\n/** @type {string} */\nconst collapseComponent = 'Collapse';\n\n/* Native JavaScript for Bootstrap 5 | Collapse\n----------------------------------------------- */\n\n// COLLAPSE GC\n// ===========\nconst collapseSelector = `.${collapseString}`;\nconst collapseToggleSelector = `[${dataBsToggle}=\"${collapseString}\"]`;\nconst collapseDefaults = { parent: null };\n\n/**\n * Static method which returns an existing `Collapse` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Collapse>}\n */\nconst getCollapseInstance = (element) => getInstance(element, collapseComponent);\n\n/**\n * A `Collapse` initialization callback.\n * @type {BSN.InitCallback<Collapse>}\n */\nconst collapseInitCallback = (element) => new Collapse(element);\n\n// COLLAPSE CUSTOM EVENTS\n// ======================\nconst showCollapseEvent = OriginalEvent(`show.bs.${collapseString}`);\nconst shownCollapseEvent = OriginalEvent(`shown.bs.${collapseString}`);\nconst hideCollapseEvent = OriginalEvent(`hide.bs.${collapseString}`);\nconst hiddenCollapseEvent = OriginalEvent(`hidden.bs.${collapseString}`);\n\n// COLLAPSE PRIVATE METHODS\n// ========================\n/**\n * Expand the designated `Element`.\n * @param {Collapse} self the `Collapse` instance\n */\nfunction expandCollapse(self) {\n  const {\n    element, parent, triggers,\n  } = self;\n\n  dispatchEvent(element, showCollapseEvent);\n  if (showCollapseEvent.defaultPrevented) return;\n\n  Timer.set(element, () => {}, 17);\n  if (parent) Timer.set(parent, () => {}, 17);\n\n  addClass(element, collapsingClass);\n  removeClass(element, collapseString);\n\n  // @ts-ignore\n  element.style.height = `${element.scrollHeight}px`;\n\n  emulateTransitionEnd(element, () => {\n    Timer.clear(element);\n    if (parent) Timer.clear(parent);\n\n    triggers.forEach((btn) => setAttribute(btn, ariaExpanded, 'true'));\n\n    removeClass(element, collapsingClass);\n    addClass(element, collapseString);\n    addClass(element, showClass);\n\n    // @ts-ignore\n    element.style.height = '';\n\n    dispatchEvent(element, shownCollapseEvent);\n  });\n}\n\n/**\n * Collapse the designated `Element`.\n * @param {Collapse} self the `Collapse` instance\n */\nfunction collapseContent(self) {\n  const {\n    // @ts-ignore\n    element, parent, triggers,\n  } = self;\n\n  dispatchEvent(element, hideCollapseEvent);\n\n  if (hideCollapseEvent.defaultPrevented) return;\n\n  Timer.set(element, () => {}, 17);\n  if (parent) Timer.set(parent, () => {}, 17);\n\n  // @ts-ignore\n  element.style.height = `${element.scrollHeight}px`;\n\n  removeClass(element, collapseString);\n  removeClass(element, showClass);\n  addClass(element, collapsingClass);\n\n  reflow(element);\n  // @ts-ignore\n  element.style.height = '0px';\n\n  emulateTransitionEnd(element, () => {\n    Timer.clear(element);\n    if (parent) Timer.clear(parent);\n\n    triggers.forEach((btn) => setAttribute(btn, ariaExpanded, 'false'));\n\n    removeClass(element, collapsingClass);\n    addClass(element, collapseString);\n\n    // @ts-ignore\n    element.style.height = '';\n\n    dispatchEvent(element, hiddenCollapseEvent);\n  });\n}\n\n/**\n * Toggles on/off the event listener(s) of the `Collapse` instance.\n * @param {Collapse} self the `Collapse` instance\n * @param {boolean=} add when `true`, the event listener is added\n */\nfunction toggleCollapseHandler(self, add) {\n  const action = add ? on : off;\n  const { triggers } = self;\n\n  if (triggers.length) {\n    triggers.forEach((btn) => action(btn, mouseclickEvent, collapseClickHandler));\n  }\n}\n\n// COLLAPSE EVENT HANDLER\n// ======================\n/**\n * Handles the `click` event for the `Collapse` instance.\n * @param {MouseEvent} e the `Event` object\n */\nfunction collapseClickHandler(e) {\n  const { target } = e; // @ts-ignore - our target is `HTMLElement`\n  const trigger = target && closest(target, collapseToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getCollapseInstance(element);\n  if (self) self.toggle();\n\n  // event target is anchor link #398\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n}\n\n// COLLAPSE DEFINITION\n// ===================\n\n/** Returns a new `Colapse` instance. */\nclass Collapse extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target and `Element` that matches the selector\n   * @param {BSN.Options.Collapse=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element, options } = self;\n\n    // set triggering elements\n    /** @type {(HTMLElement | Element)[]} */\n    self.triggers = [...querySelectorAll(collapseToggleSelector)]\n      .filter((btn) => getTargetElement(btn) === element);\n\n    // set parent accordion\n    /** @type {(HTMLElement | Element)?} */\n    self.parent = querySelector(options.parent);\n\n    // add event listeners\n    toggleCollapseHandler(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return collapseComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return collapseDefaults; }\r\n  /* eslint-enable */\n\n  // COLLAPSE PUBLIC METHODS\n  // =======================\n  /** Toggles the visibility of the collapse. */\n  toggle() {\n    const self = this;\n    if (!hasClass(self.element, showClass)) self.show();\n    else self.hide();\n  }\n\n  /** Hides the collapse. */\n  hide() {\n    const self = this;\n    const { triggers, element } = self;\n    if (Timer.get(element)) return;\n\n    collapseContent(self);\n    if (triggers.length) {\n      triggers.forEach((btn) => addClass(btn, `${collapseString}d`));\n    }\n  }\n\n  /** Shows the collapse. */\n  show() {\n    const self = this;\n    const {\n      element, parent, triggers,\n    } = self;\n    let activeCollapse;\n    let activeCollapseInstance;\n\n    if (parent) {\n      activeCollapse = [...querySelectorAll(`.${collapseString}.${showClass}`, parent)]\n        .find((i) => getCollapseInstance(i));\n      activeCollapseInstance = activeCollapse && getCollapseInstance(activeCollapse);\n    }\n\n    if ((!parent || (parent && !Timer.get(parent))) && !Timer.get(element)) {\n      if (activeCollapseInstance && activeCollapse !== element) {\n        collapseContent(activeCollapseInstance);\n        activeCollapseInstance.triggers.forEach((btn) => {\n          addClass(btn, `${collapseString}d`);\n        });\n      }\n\n      expandCollapse(self);\n      if (triggers.length) {\n        triggers.forEach((btn) => removeClass(btn, `${collapseString}d`));\n      }\n    }\n  }\n\n  /** Remove the `Collapse` component from the target `Element`. */\n  dispose() {\n    const self = this;\n    toggleCollapseHandler(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Collapse, {\n  selector: collapseSelector,\n  init: collapseInitCallback,\n  getInstance: getCollapseInstance,\n});\n\n/**\n * A global namespace for `focus` event.\n * @type {string}\n */\nconst focusEvent = 'focus';\n\n/**\n * A global namespace for `keyup` event.\n * @type {string}\n */\nconst keyupEvent = 'keyup';\n\n/**\n * A global namespace for `scroll` event.\n * @type {string}\n */\nconst scrollEvent = 'scroll';\n\n/**\n * A global namespace for `resize` event.\n * @type {string}\n */\nconst resizeEvent = 'resize';\n\n/**\n * A global namespace for `ArrowUp` key.\n * @type {string} e.which = 38 equivalent\n */\nconst keyArrowUp = 'ArrowUp';\n\n/**\n * A global namespace for `ArrowDown` key.\n * @type {string} e.which = 40 equivalent\n */\nconst keyArrowDown = 'ArrowDown';\n\n/**\n * A global namespace for `Escape` key.\n * @type {string} e.which = 27 equivalent\n */\nconst keyEscape = 'Escape';\n\n/**\n * Shortcut for `HTMLElement.hasAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n */\nconst hasAttribute = (element, attribute) => element.hasAttribute(attribute);\n\n/**\n * Shortcut for multiple uses of `HTMLElement.style.propertyName` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {Partial<CSSStyleDeclaration>} styles attribute value\n */\n// @ts-ignore\nconst setElementStyle = (element, styles) => { ObjectAssign(element.style, styles); };\n\n/**\n * Utility to focus an `HTMLElement` target.\n *\n * @param {HTMLElement | Element} element is the target\n */\n// @ts-ignore -- `Element`s resulted from querySelector can focus too\nconst focus = (element) => element.focus();\n\n/**\n * Global namespace for `Dropdown` types / classes.\n */\nconst dropdownMenuClasses = ['dropdown', 'dropup', 'dropstart', 'dropend'];\n\n/** @type {string} */\nconst dropdownComponent = 'Dropdown';\n\n/**\n * Global namespace for `.dropdown-menu`.\n */\nconst dropdownMenuClass = 'dropdown-menu';\n\n/**\n * Checks if an *event.target* or its parent has an `href=\"#\"` value.\n * We need to prevent jumping around onclick, don't we?\n *\n * @param {HTMLElement | HTMLAnchorElement | EventTarget} element the target element\n * @returns {boolean} the query result\n */\nfunction isEmptyAnchor(element) {\n  // @ts-ignore -- `EventTarget` must be `HTMLElement`\n  const parentAnchor = closest(element, 'A');\n  // @ts-ignore -- anchor href starts with #\n  return element && ((hasAttribute(element, 'href') && element.href.slice(-1) === '#')\n    // @ts-ignore -- OR a child of an anchor with href starts with #\n    || (parentAnchor && hasAttribute(parentAnchor, 'href') && parentAnchor.href.slice(-1) === '#'));\n}\n\n/* Native JavaScript for Bootstrap 5 | Dropdown\n----------------------------------------------- */\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst [\n  dropdownString,\n  dropupString,\n  dropstartString,\n  dropendString,\n] = dropdownMenuClasses;\nconst dropdownSelector = `[${dataBsToggle}=\"${dropdownString}\"]`;\n\n/**\n * Static method which returns an existing `Dropdown` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Dropdown>}\n */\nconst getDropdownInstance = (element) => getInstance(element, dropdownComponent);\n\n/**\n * A `Dropdown` initialization callback.\n * @type {BSN.InitCallback<Dropdown>}\n */\nconst dropdownInitCallback = (element) => new Dropdown(element);\n\n// DROPDOWN PRIVATE GC\n// ===================\nconst dropdownMenuEndClass = `${dropdownMenuClass}-end`;\nconst verticalClass = [dropdownString, dropupString];\nconst horizontalClass = [dropstartString, dropendString];\nconst menuFocusTags = ['A', 'BUTTON'];\n\nconst dropdownDefaults = {\n  offset: 5, // [number] 5(px)\n  display: 'dynamic', // [dynamic|static]\n};\n\n// DROPDOWN CUSTOM EVENTS\n// ======================\nconst showDropdownEvent = OriginalEvent(`show.bs.${dropdownString}`);\nconst shownDropdownEvent = OriginalEvent(`shown.bs.${dropdownString}`);\nconst hideDropdownEvent = OriginalEvent(`hide.bs.${dropdownString}`);\nconst hiddenDropdownEvent = OriginalEvent(`hidden.bs.${dropdownString}`);\n\n// DROPDOWN PRIVATE METHODS\n// ========================\n/**\n * Apply specific style or class names to a `.dropdown-menu` to automatically\n * accomodate the layout and the page scroll.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nfunction styleDropdown(self) {\n  const {\n    element, menu, parentElement, options,\n  } = self;\n  const { offset } = options;\n\n  // don't apply any style on mobile view\n  if (getElementStyle(menu, 'position') === 'static') return;\n\n  const RTL = isRTL(element);\n  const menuEnd = hasClass(parentElement, dropdownMenuEndClass);\n\n  // reset menu offset and position\n  const resetProps = ['margin', 'top', 'bottom', 'left', 'right'];\n  // @ts-ignore\n  resetProps.forEach((p) => { menu.style[p] = ''; });\n\n  // set initial position class\n  // take into account .btn-group parent as .dropdown\n  let positionClass = dropdownMenuClasses.find((c) => hasClass(parentElement, c)) || dropdownString;\n\n  /** @type {Record<string, Record<string, any>>} */\n  let dropdownMargin = {\n    dropdown: [offset, 0, 0],\n    dropup: [0, 0, offset],\n    dropstart: RTL ? [-1, 0, 0, offset] : [-1, offset, 0],\n    dropend: RTL ? [-1, offset, 0] : [-1, 0, 0, offset],\n  };\n\n  /** @type {Record<string, Record<string, any>>} */\n  const dropdownPosition = {\n    dropdown: { top: '100%' },\n    dropup: { top: 'auto', bottom: '100%' },\n    dropstart: RTL ? { left: '100%', right: 'auto' } : { left: 'auto', right: '100%' },\n    dropend: RTL ? { left: 'auto', right: '100%' } : { left: '100%', right: 'auto' },\n    menuEnd: RTL ? { right: 'auto', left: 0 } : { right: 0, left: 'auto' },\n  };\n\n  // @ts-ignore\n  const { offsetWidth: menuWidth, offsetHeight: menuHeight } = menu;\n\n  const { clientWidth, clientHeight } = getDocumentElement(element);\n  const {\n    left: targetLeft, top: targetTop,\n    width: targetWidth, height: targetHeight,\n  } = getBoundingClientRect(element);\n\n  // dropstart | dropend\n  const leftFullExceed = targetLeft - menuWidth - offset < 0;\n  // dropend\n  const rightFullExceed = targetLeft + menuWidth + targetWidth + offset >= clientWidth;\n  // dropstart | dropend\n  const bottomExceed = targetTop + menuHeight + offset >= clientHeight;\n  // dropdown\n  const bottomFullExceed = targetTop + menuHeight + targetHeight + offset >= clientHeight;\n  // dropup\n  const topExceed = targetTop - menuHeight - offset < 0;\n  // dropdown / dropup\n  const leftExceed = ((!RTL && menuEnd) || (RTL && !menuEnd))\n    && targetLeft + targetWidth - menuWidth < 0;\n  const rightExceed = ((RTL && menuEnd) || (!RTL && !menuEnd))\n    && targetLeft + menuWidth >= clientWidth;\n\n  // recompute position\n  // handle RTL as well\n  if (horizontalClass.includes(positionClass) && leftFullExceed && rightFullExceed) {\n    positionClass = dropdownString;\n  }\n  if (positionClass === dropstartString && (!RTL ? leftFullExceed : rightFullExceed)) {\n    positionClass = dropendString;\n  }\n  if (positionClass === dropendString && (RTL ? leftFullExceed : rightFullExceed)) {\n    positionClass = dropstartString;\n  }\n  if (positionClass === dropupString && topExceed && !bottomFullExceed) {\n    positionClass = dropdownString;\n  }\n  if (positionClass === dropdownString && bottomFullExceed && !topExceed) {\n    positionClass = dropupString;\n  }\n  // override position for horizontal classes\n  if (horizontalClass.includes(positionClass) && bottomExceed) {\n    ObjectAssign(dropdownPosition[positionClass], {\n      top: 'auto', bottom: 0,\n    });\n  }\n  // override position for vertical classes\n  if (verticalClass.includes(positionClass) && (leftExceed || rightExceed)) {\n    // don't realign when menu is wider than window\n    // in both RTL and non-RTL readability is KING\n    if (targetLeft + targetWidth + Math.abs(menuWidth - targetWidth) + offset < clientWidth) {\n      ObjectAssign(dropdownPosition[positionClass],\n        leftExceed ? { left: 0, right: 'auto' } : { left: 'auto', right: 0 });\n    }\n  }\n\n  dropdownMargin = dropdownMargin[positionClass];\n  // @ts-ignore\n  menu.style.margin = `${dropdownMargin.map((x) => (x ? `${x}px` : x)).join(' ')}`;\n\n  setElementStyle(menu, dropdownPosition[positionClass]);\n\n  // update dropdown-menu-end\n  if (hasClass(menu, dropdownMenuEndClass)) {\n    setElementStyle(menu, dropdownPosition.menuEnd);\n  }\n}\n\n/**\n * Returns an `Array` of focusable items in the given dropdown-menu.\n * @param {HTMLElement | Element} menu\n * @returns {(HTMLElement | Element)[]}\n */\nfunction getMenuItems(menu) {\n  // @ts-ignore\n  return [...menu.children].map((c) => {\n    if (c && menuFocusTags.includes(c.tagName)) return c;\n    const { firstElementChild } = c;\n    if (firstElementChild && menuFocusTags.includes(firstElementChild.tagName)) {\n      return firstElementChild;\n    }\n    return null;\n  }).filter((c) => c);\n}\n\n/**\n * Toggles on/off the listeners for the events that close the dropdown\n * as well as event that request a new position for the dropdown.\n *\n * @param {Dropdown} self the `Dropdown` instance\n */\nfunction toggleDropdownDismiss(self) {\n  const { element } = self;\n  const action = self.open ? on : off;\n  const doc = getDocument(element);\n\n  action(doc, mouseclickEvent, dropdownDismissHandler);\n  action(doc, focusEvent, dropdownDismissHandler);\n  action(doc, keydownEvent, dropdownPreventScroll);\n  action(doc, keyupEvent, dropdownKeyHandler);\n\n  if (self.options.display === 'dynamic') {\n    [scrollEvent, resizeEvent].forEach((ev) => {\n      // @ts-ignore\n      action(getWindow(element), ev, dropdownLayoutHandler, passiveHandler);\n    });\n  }\n}\n\n/**\n * Toggles on/off the `click` event listener of the `Dropdown`.\n *\n * @param {Dropdown} self the `Dropdown` instance\n * @param {boolean=} add when `true`, it will add the event listener\n */\nfunction toggleDropdownHandler(self, add) {\n  const action = add ? on : off;\n  action(self.element, mouseclickEvent, dropdownClickHandler);\n}\n\n/**\n * Returns the currently open `.dropdown` element.\n *\n * @param {(Document | HTMLElement | Element | globalThis)=} element target\n * @returns {HTMLElement?} the query result\n */\nfunction getCurrentOpenDropdown(element) {\n  const currentParent = [...dropdownMenuClasses, 'btn-group', 'input-group']\n    .map((c) => getElementsByClassName(`${c} ${showClass}`), getDocument(element))\n    .find((x) => x.length);\n\n  if (currentParent && currentParent.length) {\n    // @ts-ignore -- HTMLElement is also Element\n    return [...currentParent[0].children]\n      .find((x) => hasAttribute(x, dataBsToggle));\n  }\n  return null;\n}\n\n// DROPDOWN EVENT HANDLERS\n// =======================\n/**\n * Handles the `click` event for the `Dropdown` instance.\n *\n * @param {MouseEvent} e event object\n * @this {Document}\n */\nfunction dropdownDismissHandler(e) {\n  const { target, type } = e;\n  // @ts-ignore\n  if (!target || !target.closest) return; // some weird FF bug #409\n\n  // @ts-ignore\n  const element = getCurrentOpenDropdown(target);\n  if (!element) return;\n\n  const self = getDropdownInstance(element);\n  if (!self) return;\n\n  const { parentElement, menu } = self;\n\n  // @ts-ignore\n  const hasData = closest(target, dropdownSelector) !== null;\n  // @ts-ignore\n  const isForm = parentElement && parentElement.contains(target)\n    // @ts-ignore\n    && (target.tagName === 'form' || closest(target, 'form') !== null);\n\n  // @ts-ignore\n  if (type === mouseclickEvent && isEmptyAnchor(target)) {\n    e.preventDefault();\n  }\n  if (type === focusEvent // @ts-ignore\n    && (target === element || target === menu || menu.contains(target))) {\n    return;\n  }\n\n  if (isForm || hasData) ; else if (self) {\n    self.hide();\n  }\n}\n\n/**\n * Handles `click` event listener for `Dropdown`.\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e event object\n */\nfunction dropdownClickHandler(e) {\n  const element = this;\n  const { target } = e;\n  const self = getDropdownInstance(element);\n\n  if (self) {\n    self.toggle();\n    if (target && isEmptyAnchor(target)) e.preventDefault();\n  }\n}\n\n/**\n * Prevents scroll when dropdown-menu is visible.\n * @param {KeyboardEvent} e event object\n */\nfunction dropdownPreventScroll(e) {\n  if ([keyArrowDown, keyArrowUp].includes(e.code)) e.preventDefault();\n}\n\n/**\n * Handles keyboard `keydown` events for `Dropdown`.\n * @param {KeyboardEvent} e keyboard key\n * @this {Document}\n */\nfunction dropdownKeyHandler(e) {\n  const { code } = e;\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n  const activeItem = element && getDocument(element).activeElement;\n  if (!self || !activeItem) return;\n  const { menu, open } = self;\n  const menuItems = getMenuItems(menu);\n\n  // arrow up & down\n  if (menuItems && menuItems.length && [keyArrowDown, keyArrowUp].includes(code)) {\n    let idx = menuItems.indexOf(activeItem);\n    if (activeItem === element) {\n      idx = 0;\n    } else if (code === keyArrowUp) {\n      idx = idx > 1 ? idx - 1 : 0;\n    } else if (code === keyArrowDown) {\n      idx = idx < menuItems.length - 1 ? idx + 1 : idx;\n    }\n    if (menuItems[idx]) focus(menuItems[idx]);\n  }\n\n  if (keyEscape === code && open) {\n    self.toggle();\n    focus(element);\n  }\n}\n\n/**\n * @this {globalThis}\n * @returns {void}\n */\nfunction dropdownLayoutHandler() {\n  const element = getCurrentOpenDropdown(this);\n  const self = element && getDropdownInstance(element);\n\n  if (self && self.open) styleDropdown(self);\n}\n\n// DROPDOWN DEFINITION\n// ===================\n/** Returns a new Dropdown instance. */\nclass Dropdown extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target Element or string selector\n   * @param {BSN.Options.Dropdown=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n    const { parentElement } = element;\n\n    // set targets\n    /** @type {(Element | HTMLElement)} */\n    // @ts-ignore\n    self.parentElement = parentElement;\n    /** @type {(Element | HTMLElement)} */\n    // @ts-ignore\n    self.menu = querySelector(`.${dropdownMenuClass}`, parentElement);\n\n    // set initial state to closed\n    /** @type {boolean} */\n    self.open = false;\n\n    // add event listener\n    toggleDropdownHandler(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return dropdownComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return dropdownDefaults; }\r\n  /* eslint-enable */\n\n  // DROPDOWN PUBLIC METHODS\n  // =======================\n  /** Shows/hides the dropdown menu to the user. */\n  toggle() {\n    const self = this;\n\n    if (self.open) self.hide();\n    else self.show();\n  }\n\n  /** Shows the dropdown menu to the user. */\n  show() {\n    const self = this;\n    const {\n      element, open, menu, parentElement,\n    } = self;\n\n    const currentElement = getCurrentOpenDropdown(element);\n    const currentInstance = currentElement && getDropdownInstance(currentElement);\n    if (currentInstance) currentInstance.hide();\n\n    // dispatch\n    [showDropdownEvent, shownDropdownEvent].forEach((e) => { e.relatedTarget = element; });\n    dispatchEvent(parentElement, showDropdownEvent);\n    if (showDropdownEvent.defaultPrevented) return;\n\n    addClass(menu, showClass);\n    addClass(parentElement, showClass);\n    setAttribute(element, ariaExpanded, 'true');\n\n    // change menu position\n    styleDropdown(self);\n\n    self.open = !open;\n\n    setTimeout(() => {\n      focus(element); // focus the element\n      toggleDropdownDismiss(self);\n      dispatchEvent(parentElement, shownDropdownEvent);\n    }, 1);\n  }\n\n  /** Hides the dropdown menu from the user. */\n  hide() {\n    const self = this;\n    const {\n      element, open, menu, parentElement,\n    } = self;\n    [hideDropdownEvent, hiddenDropdownEvent].forEach((e) => { e.relatedTarget = element; });\n\n    dispatchEvent(parentElement, hideDropdownEvent);\n    if (hideDropdownEvent.defaultPrevented) return;\n\n    removeClass(menu, showClass);\n    removeClass(parentElement, showClass);\n    setAttribute(element, ariaExpanded, 'false');\n\n    self.open = !open;\n\n    // only re-attach handler if the instance is not disposed\n    setTimeout(() => toggleDropdownDismiss(self), 1);\n\n    dispatchEvent(parentElement, hiddenDropdownEvent);\n  }\n\n  /** Removes the `Dropdown` component from the target element. */\n  dispose() {\n    const self = this;\n    const { parentElement } = self;\n\n    if (hasClass(parentElement, showClass) && self.open) self.hide();\n\n    toggleDropdownHandler(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Dropdown, {\n  selector: dropdownSelector,\n  init: dropdownInitCallback,\n  getInstance: getDropdownInstance,\n});\n\n/**\n * A global namespace for aria-hidden.\n * @type {string}\n */\nconst ariaHidden = 'aria-hidden';\n\n/**\n * A global namespace for aria-modal.\n * @type {string}\n */\nconst ariaModal = 'aria-modal';\n\n/**\n * Shortcut for `HTMLElement.removeAttribute()` method.\n * @param  {HTMLElement | Element} element target element\n * @param  {string} attribute attribute name\n */\nconst removeAttribute = (element, attribute) => element.removeAttribute(attribute);\n\n/**\n * Returns the `document.body` or the `<body>` element.\n *\n * @param {(Node | HTMLElement | Element | globalThis)=} node\n * @returns {HTMLElement | HTMLBodyElement}\n */\nfunction getDocumentBody(node) {\n  return getDocument(node).body;\n}\n\n/** @type {string} */\nconst modalString = 'modal';\n\n/** @type {string} */\nconst modalComponent = 'Modal';\n\n/**\n * Check if target is a `ShadowRoot`.\n *\n * @param {any} element target\n * @returns {boolean} the query result\n */\nconst isShadowRoot = (element) => {\n  const OwnElement = getWindow(element).ShadowRoot;\n  return element instanceof OwnElement || element instanceof ShadowRoot;\n};\n\n/**\n * Returns the `parentNode` also going through `ShadowRoot`.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {Node | HTMLElement | Element} node the target node\n * @returns {Node | HTMLElement | Element} the apropriate parent node\n */\nfunction getParentNode(node) {\n  if (node.nodeName === 'HTML') {\n    return node;\n  }\n\n  // this is a quicker (but less type safe) way to save quite some bytes from the bundle\n  return (\n    // @ts-ignore\n    node.assignedSlot // step into the shadow DOM of the parent of a slotted node\n    || node.parentNode // @ts-ignore DOM Element detected\n    || (isShadowRoot(node) ? node.host : null) // ShadowRoot detected\n    || getDocumentElement(node) // fallback\n  );\n}\n\n/**\n * Check if a target element is a `<table>`, `<td>` or `<th>`.\n * @param {any} element the target element\n * @returns {boolean} the query result\n */\nconst isTableElement = (element) => ['TABLE', 'TD', 'TH'].includes(element.tagName);\n\n/**\n * Checks if an element is an `HTMLElement`.\n *\n * @param {any} element the target object\n * @returns {boolean} the query result\n */\nconst isHTMLElement = (element) => element instanceof HTMLElement;\n\n/**\n * Returns an `HTMLElement` to be used as default value for *options.container*\n * for `Tooltip` / `Popover` components.\n *\n * When `getOffset` is *true*, it returns the `offsetParent` for tooltip/popover\n * offsets computation similar to **floating-ui**.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element} element the target\n * @param {boolean=} getOffset when *true* it will return an `offsetParent`\n * @returns {HTMLElement | HTMLBodyElement | Window | globalThis} the query result\n */\nfunction getElementContainer(element, getOffset) {\n  const majorBlockTags = ['HTML', 'BODY'];\n\n  if (getOffset) {\n    /** @type {any} */\n    let { offsetParent } = element;\n    const win = getWindow(element);\n    // const { innerWidth } = getDocumentElement(element);\n\n    while (offsetParent && (isTableElement(offsetParent)\n      || (isHTMLElement(offsetParent)\n        && getElementStyle(offsetParent, 'position') !== 'fixed'))) {\n      offsetParent = offsetParent.offsetParent;\n    }\n\n    if (!offsetParent || (offsetParent\n      && (majorBlockTags.includes(offsetParent.tagName)\n        || getElementStyle(offsetParent, 'position') === 'static'))) {\n      offsetParent = win;\n    }\n    return offsetParent;\n  }\n\n  /** @type {(HTMLElement)[]} */\n  const containers = [];\n  /** @type {any} */\n  let { parentNode } = element;\n\n  while (parentNode && !majorBlockTags.includes(parentNode.nodeName)) {\n    parentNode = getParentNode(parentNode);\n    if (!(isShadowRoot(parentNode) || !!parentNode.shadowRoot\n      || isTableElement(parentNode))) {\n      containers.push(parentNode);\n    }\n  }\n\n  return containers.find((c, i) => {\n    if (getElementStyle(c, 'position') !== 'relative'\n      && containers.slice(i + 1).every((r) => getElementStyle(r, 'position') === 'static')) {\n      return c;\n    }\n    return null;\n  }) || getDocumentBody(element);\n}\n\n/**\n * Global namespace for components `fixed-top` class.\n */\nconst fixedTopClass = 'fixed-top';\n\n/**\n * Global namespace for components `fixed-bottom` class.\n */\nconst fixedBottomClass = 'fixed-bottom';\n\n/**\n * Global namespace for components `sticky-top` class.\n */\nconst stickyTopClass = 'sticky-top';\n\n/**\n * Global namespace for components `position-sticky` class.\n */\nconst positionStickyClass = 'position-sticky';\n\n/** @param {(HTMLElement | Element | Document)=} parent */\nconst getFixedItems = (parent) => [\n  ...getElementsByClassName(fixedTopClass, parent),\n  ...getElementsByClassName(fixedBottomClass, parent),\n  ...getElementsByClassName(stickyTopClass, parent),\n  ...getElementsByClassName(positionStickyClass, parent),\n  ...getElementsByClassName('is-fixed', parent),\n];\n\n/**\n * Removes *padding* and *overflow* from the `<body>`\n * and all spacing from fixed items.\n * @param {(HTMLElement | Element)=} element the target modal/offcanvas\n */\nfunction resetScrollbar(element) {\n  const bd = getDocumentBody(element);\n  setElementStyle(bd, {\n    paddingRight: '',\n    overflow: '',\n  });\n\n  const fixedItems = getFixedItems(bd);\n\n  if (fixedItems.length) {\n    fixedItems.forEach((fixed) => {\n      setElementStyle(fixed, {\n        paddingRight: '',\n        marginRight: '',\n      });\n    });\n  }\n}\n\n/**\n * Returns the scrollbar width if the body does overflow\n * the window.\n * @param {(HTMLElement | Element)=} element\n * @returns {number} the value\n */\nfunction measureScrollbar(element) {\n  const { clientWidth } = getDocumentElement(element);\n  const { innerWidth } = getWindow(element);\n  return Math.abs(innerWidth - clientWidth);\n}\n\n/**\n * Sets the `<body>` and fixed items style when modal / offcanvas\n * is shown to the user.\n *\n * @param {HTMLElement | Element} element the target modal/offcanvas\n * @param {boolean=} overflow body does overflow or not\n */\nfunction setScrollbar(element, overflow) {\n  const bd = getDocumentBody(element);\n  const bodyPad = parseInt(getElementStyle(bd, 'paddingRight'), 10);\n  const isOpen = getElementStyle(bd, 'overflow') === 'hidden';\n  const sbWidth = isOpen && bodyPad ? 0 : measureScrollbar(element);\n  const fixedItems = getFixedItems(bd);\n\n  if (overflow) {\n    setElementStyle(bd, {\n      overflow: 'hidden',\n      paddingRight: `${bodyPad + sbWidth}px`,\n    });\n\n    if (fixedItems.length) {\n      fixedItems.forEach((fixed) => {\n        const itemPadValue = getElementStyle(fixed, 'paddingRight');\n        // @ts-ignore\n        fixed.style.paddingRight = `${parseInt(itemPadValue, 10) + sbWidth}px`;\n        if ([stickyTopClass, positionStickyClass].some((c) => hasClass(fixed, c))) {\n          const itemMValue = getElementStyle(fixed, 'marginRight');\n          // @ts-ignore\n          fixed.style.marginRight = `${parseInt(itemMValue, 10) - sbWidth}px`;\n        }\n      });\n    }\n  }\n}\n\n/** @type {string} */\nconst offcanvasString = 'offcanvas';\n\nconst backdropString = 'backdrop';\nconst modalBackdropClass = `${modalString}-${backdropString}`;\nconst offcanvasBackdropClass = `${offcanvasString}-${backdropString}`;\nconst modalActiveSelector = `.${modalString}.${showClass}`;\nconst offcanvasActiveSelector = `.${offcanvasString}.${showClass}`;\n\n// any document would suffice\nconst overlay = getDocument().createElement('div');\n\n/**\n * Returns the current active modal / offcancas element.\n * @param {(HTMLElement | Element)=} element the context element\n * @returns {(HTMLElement | Element)?} the requested element\n */\nfunction getCurrentOpen(element) {\n  return querySelector(`${modalActiveSelector},${offcanvasActiveSelector}`, getDocument(element));\n}\n\n/**\n * Toogles from a Modal overlay to an Offcanvas, or vice-versa.\n * @param {boolean=} isModal\n */\nfunction toggleOverlayType(isModal) {\n  const targetClass = isModal ? modalBackdropClass : offcanvasBackdropClass;\n  [modalBackdropClass, offcanvasBackdropClass].forEach((c) => {\n    removeClass(overlay, c);\n  });\n  addClass(overlay, targetClass);\n}\n\n/**\n * Append the overlay to DOM.\n * @param {HTMLElement | Element} container\n * @param {boolean} hasFade\n * @param {boolean=} isModal\n */\nfunction appendOverlay(container, hasFade, isModal) {\n  toggleOverlayType(isModal);\n  container.append(overlay);\n  if (hasFade) addClass(overlay, fadeClass);\n}\n\n/**\n * Shows the overlay to the user.\n */\nfunction showOverlay() {\n  addClass(overlay, showClass);\n  reflow(overlay);\n}\n\n/**\n * Hides the overlay from the user.\n */\nfunction hideOverlay() {\n  removeClass(overlay, showClass);\n}\n\n/**\n * Removes the overlay from DOM.\n * @param {(HTMLElement | Element)=} element\n */\nfunction removeOverlay(element) {\n  if (!getCurrentOpen(element)) {\n    removeClass(overlay, fadeClass);\n    overlay.remove();\n    resetScrollbar(element);\n  }\n}\n\n/**\n * @param {HTMLElement | Element} element target\n * @returns {boolean}\n */\nfunction isVisible(element) {\n  return element && getElementStyle(element, 'visibility') !== 'hidden'\n    // @ts-ignore\n    && element.offsetParent !== null;\n}\n\n/* Native JavaScript for Bootstrap 5 | Modal\n-------------------------------------------- */\n\n// MODAL PRIVATE GC\n// ================\nconst modalSelector = `.${modalString}`;\nconst modalToggleSelector = `[${dataBsToggle}=\"${modalString}\"]`;\nconst modalDismissSelector = `[${dataBsDismiss}=\"${modalString}\"]`;\nconst modalStaticClass = `${modalString}-static`;\n\nconst modalDefaults = {\n  backdrop: true, // boolean|string\n  keyboard: true, // boolean\n};\n\n/**\n * Static method which returns an existing `Modal` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Modal>}\n */\nconst getModalInstance = (element) => getInstance(element, modalComponent);\n\n/**\n * A `Modal` initialization callback.\n * @type {BSN.InitCallback<Modal>}\n */\nconst modalInitCallback = (element) => new Modal(element);\n\n// MODAL CUSTOM EVENTS\n// ===================\nconst showModalEvent = OriginalEvent(`show.bs.${modalString}`);\nconst shownModalEvent = OriginalEvent(`shown.bs.${modalString}`);\nconst hideModalEvent = OriginalEvent(`hide.bs.${modalString}`);\nconst hiddenModalEvent = OriginalEvent(`hidden.bs.${modalString}`);\n\n// MODAL PRIVATE METHODS\n// =====================\n/**\n * Applies special style for the `<body>` and fixed elements\n * when a modal instance is shown to the user.\n *\n * @param {Modal} self the `Modal` instance\n */\nfunction setModalScrollbar(self) {\n  const { element } = self;\n  const scrollbarWidth = measureScrollbar(element);\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  const { clientHeight: modalHeight, scrollHeight: modalScrollHeight } = element;\n  const modalOverflow = modalHeight !== modalScrollHeight;\n\n  if (!modalOverflow && scrollbarWidth) {\n    const pad = isRTL(element) ? 'paddingLeft' : 'paddingRight';\n    // @ts-ignore\n    element.style[pad] = `${scrollbarWidth}px`;\n  }\n  setScrollbar(element, (modalOverflow || clientHeight !== scrollHeight));\n}\n\n/**\n * Toggles on/off the listeners of events that close the modal.\n *\n * @param {Modal} self the `Modal` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleModalDismiss(self, add) {\n  const action = add ? on : off;\n  const { element } = self;\n  action(element, mouseclickEvent, modalDismissHandler);\n  // @ts-ignore\n  action(getWindow(element), resizeEvent, self.update, passiveHandler);\n  action(getDocument(element), keydownEvent, modalKeyHandler);\n}\n\n/**\n * Toggles on/off the `click` event listener of the `Modal` instance.\n * @param {Modal} self the `Modal` instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleModalHandler(self, add) {\n  const action = add ? on : off;\n  const { triggers } = self;\n\n  if (triggers.length) {\n    triggers.forEach((btn) => action(btn, mouseclickEvent, modalClickHandler));\n  }\n}\n\n/**\n * Executes after a modal is hidden to the user.\n * @param {Modal} self the `Modal` instance\n */\nfunction afterModalHide(self) {\n  const { triggers, element } = self;\n  removeOverlay(element);\n  // @ts-ignore\n  element.style.paddingRight = '';\n\n  if (triggers.length) {\n    const visibleTrigger = triggers.find((x) => isVisible(x));\n    if (visibleTrigger) focus(visibleTrigger);\n  }\n}\n\n/**\n * Executes after a modal is shown to the user.\n * @param {Modal} self the `Modal` instance\n */\nfunction afterModalShow(self) {\n  const { element, relatedTarget } = self;\n  focus(element);\n  toggleModalDismiss(self, true);\n\n  shownModalEvent.relatedTarget = relatedTarget;\n  dispatchEvent(element, shownModalEvent);\n}\n\n/**\n * Executes before a modal is shown to the user.\n * @param {Modal} self the `Modal` instance\n */\nfunction beforeModalShow(self) {\n  const { element, hasFade } = self;\n  // @ts-ignore\n  element.style.display = 'block';\n\n  setModalScrollbar(self);\n  if (!getCurrentOpen(element)) {\n    getDocumentBody(element).style.overflow = 'hidden';\n  }\n\n  addClass(element, showClass);\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n\n  if (hasFade) emulateTransitionEnd(element, () => afterModalShow(self));\n  else afterModalShow(self);\n}\n\n/**\n * Executes before a modal is hidden to the user.\n * @param {Modal} self the `Modal` instance\n * @param {boolean=} force when `true` skip animation\n */\nfunction beforeModalHide(self, force) {\n  const {\n    element, options, relatedTarget, hasFade,\n  } = self;\n\n  // @ts-ignore\n  element.style.display = '';\n\n  // force can also be the transitionEvent object, we wanna make sure it's not\n  // call is not forced and overlay is visible\n  if (options.backdrop && !force && hasFade && hasClass(overlay, showClass)\n    && !getCurrentOpen(element)) { // AND no modal is visible\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => afterModalHide(self));\n  } else {\n    afterModalHide(self);\n  }\n\n  toggleModalDismiss(self);\n\n  hiddenModalEvent.relatedTarget = relatedTarget;\n  dispatchEvent(element, hiddenModalEvent);\n}\n\n// MODAL EVENT HANDLERS\n// ====================\n/**\n * Handles the `click` event listener for modal.\n * @param {MouseEvent} e the `Event` object\n * @this {HTMLElement | Element}\n */\nfunction modalClickHandler(e) {\n  const { target } = e;\n\n  const trigger = target && closest(this, modalToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getModalInstance(element);\n\n  if (!self) return;\n\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n  self.relatedTarget = trigger;\n  self.toggle();\n}\n\n/**\n * Handles the `keydown` event listener for modal\n * to hide the modal when user type the `ESC` key.\n *\n * @param {KeyboardEvent} e the `Event` object\n */\nfunction modalKeyHandler({ code }) {\n  const element = querySelector(modalActiveSelector);\n  const self = element && getModalInstance(element);\n  if (!self) return;\n  const { options } = self;\n  if (options.keyboard && code === keyEscape // the keyboard option is enabled and the key is 27\n    && hasClass(element, showClass)) { // the modal is not visible\n    self.relatedTarget = null;\n    self.hide();\n  }\n}\n\n/**\n * Handles the `click` event listeners that hide the modal.\n *\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Event` object\n */\nfunction modalDismissHandler(e) {\n  const element = this;\n  const self = getModalInstance(element);\n\n  // this timer is needed\n  if (!self || Timer.get(element)) return;\n\n  const { options, isStatic, modalDialog } = self;\n  const { backdrop } = options;\n  const { target } = e;\n\n  // @ts-ignore\n  const selectedText = getDocument(element).getSelection().toString().length;\n  // @ts-ignore\n  const targetInsideDialog = modalDialog.contains(target);\n  // @ts-ignore\n  const dismiss = target && closest(target, modalDismissSelector);\n\n  if (isStatic && !targetInsideDialog) {\n    Timer.set(element, () => {\n      addClass(element, modalStaticClass);\n      emulateTransitionEnd(modalDialog, () => staticTransitionEnd(self));\n    }, 17);\n  } else if (dismiss || (!selectedText && !isStatic && !targetInsideDialog && backdrop)) {\n    self.relatedTarget = dismiss || null;\n    self.hide();\n    e.preventDefault();\n  }\n}\n\n/**\n * Handles the `transitionend` event listeners for `Modal`.\n *\n * @param {Modal} self the `Modal` instance\n */\nfunction staticTransitionEnd(self) {\n  const { element, modalDialog } = self;\n  const duration = getElementTransitionDuration(modalDialog) + 17;\n  removeClass(element, modalStaticClass);\n  // user must wait for zoom out transition\n  Timer.set(element, () => Timer.clear(element), duration);\n}\n\n// MODAL DEFINITION\n// ================\n/** Returns a new `Modal` instance. */\nclass Modal extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target usually the `.modal` element\n   * @param {BSN.Options.Modal=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n\n    // bind\n    const self = this;\n\n    // the modal\n    const { element } = self;\n\n    // the modal-dialog\n    /** @type {(HTMLElement | Element)} */\n    // @ts-ignore\n    self.modalDialog = querySelector(`.${modalString}-dialog`, element);\n\n    // modal can have multiple triggering elements\n    /** @type {(HTMLElement | Element)[]} */\n    self.triggers = [...querySelectorAll(modalToggleSelector)]\n      .filter((btn) => getTargetElement(btn) === element);\n\n    // additional internals\n    /** @type {boolean} */\n    self.isStatic = self.options.backdrop === 'static';\n    /** @type {boolean} */\n    self.hasFade = hasClass(element, fadeClass);\n    /** @type {(HTMLElement | Element)?} */\n    self.relatedTarget = null;\n    /** @type {HTMLBodyElement | HTMLElement | Element} */\n    // @ts-ignore\n    self.container = getElementContainer(element);\n\n    // attach event listeners\n    toggleModalHandler(self, true);\n\n    // bind\n    self.update = self.update.bind(self);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return modalComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return modalDefaults; }\r\n  /* eslint-enable */\n\n  // MODAL PUBLIC METHODS\n  // ====================\n  /** Toggles the visibility of the modal. */\n  toggle() {\n    const self = this;\n    if (hasClass(self.element, showClass)) self.hide();\n    else self.show();\n  }\n\n  /** Shows the modal to the user. */\n  show() {\n    const self = this;\n    const {\n      element, options, hasFade, relatedTarget, container,\n    } = self;\n    const { backdrop } = options;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showModalEvent.relatedTarget = relatedTarget || null;\n    dispatchEvent(element, showModalEvent);\n    if (showModalEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n    if (currentOpen && currentOpen !== element) {\n      const this1 = getModalInstance(currentOpen);\n      const that1 = this1 || getInstance(currentOpen, 'Offcanvas');\n      that1.hide();\n    }\n\n    if (backdrop) {\n      if (!currentOpen && !hasClass(overlay, showClass)) {\n        appendOverlay(container, hasFade, true);\n      } else {\n        toggleOverlayType(true);\n      }\n      overlayDelay = getElementTransitionDuration(overlay);\n\n      if (!hasClass(overlay, showClass)) showOverlay();\n      setTimeout(() => beforeModalShow(self), overlayDelay);\n    } else {\n      beforeModalShow(self);\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hide the modal from the user.\n   * @param {boolean=} force when `true` it will skip animation\n   */\n  hide(force) {\n    const self = this;\n    const {\n      element, hasFade, relatedTarget,\n    } = self;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideModalEvent.relatedTarget = relatedTarget || null;\n    dispatchEvent(element, hideModalEvent);\n    if (hideModalEvent.defaultPrevented) return;\n    removeClass(element, showClass);\n    setAttribute(element, ariaHidden, 'true');\n    removeAttribute(element, ariaModal);\n\n    if (hasFade && force !== false) {\n      emulateTransitionEnd(element, () => beforeModalHide(self));\n    } else {\n      beforeModalHide(self, force);\n    }\n  }\n\n  /** Updates the modal layout. */\n  update() {\n    const self = this;\n\n    if (hasClass(self.element, showClass)) setModalScrollbar(self);\n  }\n\n  /** Removes the `Modal` component from target element. */\n  dispose() {\n    const self = this;\n    self.hide(true); // forced call\n\n    toggleModalHandler(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Modal, {\n  selector: modalSelector,\n  init: modalInitCallback,\n  getInstance: getModalInstance,\n});\n\n/** @type {string} */\nconst offcanvasComponent = 'Offcanvas';\n\n/* Native JavaScript for Bootstrap 5 | OffCanvas\n------------------------------------------------ */\n\n// OFFCANVAS PRIVATE GC\n// ====================\nconst offcanvasSelector = `.${offcanvasString}`;\nconst offcanvasToggleSelector = `[${dataBsToggle}=\"${offcanvasString}\"]`;\nconst offcanvasDismissSelector = `[${dataBsDismiss}=\"${offcanvasString}\"]`;\nconst offcanvasTogglingClass = `${offcanvasString}-toggling`;\n\nconst offcanvasDefaults = {\n  backdrop: true, // boolean\n  keyboard: true, // boolean\n  scroll: false, // boolean\n};\n\n/**\n * Static method which returns an existing `Offcanvas` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Offcanvas>}\n */\nconst getOffcanvasInstance = (element) => getInstance(element, offcanvasComponent);\n\n/**\n * An `Offcanvas` initialization callback.\n * @type {BSN.InitCallback<Offcanvas>}\n */\nconst offcanvasInitCallback = (element) => new Offcanvas(element);\n\n// OFFCANVAS CUSTOM EVENTS\n// =======================\nconst showOffcanvasEvent = OriginalEvent(`show.bs.${offcanvasString}`);\nconst shownOffcanvasEvent = OriginalEvent(`shown.bs.${offcanvasString}`);\nconst hideOffcanvasEvent = OriginalEvent(`hide.bs.${offcanvasString}`);\nconst hiddenOffcanvasEvent = OriginalEvent(`hidden.bs.${offcanvasString}`);\n\n// OFFCANVAS PRIVATE METHODS\n// =========================\n/**\n * Sets additional style for the `<body>` and other elements\n * when showing an offcanvas to the user.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction setOffCanvasScrollbar(self) {\n  const { element } = self;\n  const { clientHeight, scrollHeight } = getDocumentElement(element);\n  setScrollbar(element, clientHeight !== scrollHeight);\n}\n\n/**\n * Toggles on/off the `click` event listeners.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n * @param {boolean=} add when *true*, listeners are added\n */\nfunction toggleOffcanvasEvents(self, add) {\n  const action = add ? on : off;\n  self.triggers.forEach((btn) => action(btn, mouseclickEvent, offcanvasTriggerHandler));\n}\n\n/**\n * Toggles on/off the listeners of the events that close the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n * @param {boolean=} add when *true* listeners are added\n */\nfunction toggleOffCanvasDismiss(self, add) {\n  const action = add ? on : off;\n  const doc = getDocument(self.element);\n  action(doc, keydownEvent, offcanvasKeyDismissHandler);\n  action(doc, mouseclickEvent, offcanvasDismissHandler);\n}\n\n/**\n * Executes before showing the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction beforeOffcanvasShow(self) {\n  const { element, options } = self;\n\n  if (!options.scroll) {\n    setOffCanvasScrollbar(self);\n    getDocumentBody(element).style.overflow = 'hidden';\n  }\n\n  addClass(element, offcanvasTogglingClass);\n  addClass(element, showClass);\n  // @ts-ignore\n  element.style.visibility = 'visible';\n\n  emulateTransitionEnd(element, () => showOffcanvasComplete(self));\n}\n\n/**\n * Executes before hiding the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction beforeOffcanvasHide(self) {\n  const { element, options } = self;\n  const currentOpen = getCurrentOpen(element);\n\n  // @ts-ignore\n  element.blur();\n\n  if (!currentOpen && options.backdrop && hasClass(overlay, showClass)) {\n    hideOverlay();\n    emulateTransitionEnd(overlay, () => hideOffcanvasComplete(self));\n  } else hideOffcanvasComplete(self);\n}\n\n// OFFCANVAS EVENT HANDLERS\n// ========================\n/**\n * Handles the `click` event listeners.\n *\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Event` object\n */\nfunction offcanvasTriggerHandler(e) {\n  const trigger = closest(this, offcanvasToggleSelector);\n  const element = trigger && getTargetElement(trigger);\n  const self = element && getOffcanvasInstance(element);\n\n  if (self) {\n    self.relatedTarget = trigger;\n    self.toggle();\n    if (trigger && trigger.tagName === 'A') {\n      e.preventDefault();\n    }\n  }\n}\n\n/**\n * Handles the event listeners that close the offcanvas.\n *\n * @this {Document}\n * @param {MouseEvent} e the `Event` object\n */\nfunction offcanvasDismissHandler(e) {\n  const element = querySelector(offcanvasActiveSelector, this);\n  if (!element) return;\n\n  const offCanvasDismiss = querySelector(offcanvasDismissSelector, element);\n  const self = getOffcanvasInstance(element);\n\n  if (!self) return;\n\n  const { options, triggers } = self;\n  const { target } = e;\n  // @ts-ignore -- `EventTarget` is `HTMLElement`\n  const trigger = closest(target, offcanvasToggleSelector);\n  const selection = getDocument(element).getSelection();\n\n  if (!(selection && selection.toString().length)\n    // @ts-ignore\n    && ((!element.contains(target) && options.backdrop\n    && (!trigger || (trigger && !triggers.includes(trigger))))\n    // @ts-ignore\n    || (offCanvasDismiss && offCanvasDismiss.contains(target)))) {\n    // @ts-ignore\n    self.relatedTarget = offCanvasDismiss && offCanvasDismiss.contains(target)\n      ? offCanvasDismiss : null;\n    self.hide();\n  }\n  if (trigger && trigger.tagName === 'A') e.preventDefault();\n}\n\n/**\n * Handles the `keydown` event listener for offcanvas\n * to hide it when user type the `ESC` key.\n *\n * @param {KeyboardEvent} e the `Event` object\n * @this {Document}\n */\nfunction offcanvasKeyDismissHandler({ code }) {\n  const element = querySelector(offcanvasActiveSelector, this);\n  if (!element) return;\n\n  const self = getOffcanvasInstance(element);\n\n  if (self && self.options.keyboard && code === keyEscape) {\n    self.relatedTarget = null;\n    self.hide();\n  }\n}\n\n/**\n * Handles the `transitionend` when showing the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction showOffcanvasComplete(self) {\n  const { element, triggers } = self;\n  removeClass(element, offcanvasTogglingClass);\n\n  removeAttribute(element, ariaHidden);\n  setAttribute(element, ariaModal, 'true');\n  setAttribute(element, 'role', 'dialog');\n\n  if (triggers.length) {\n    triggers.forEach((btn) => setAttribute(btn, ariaExpanded, 'true'));\n  }\n\n  dispatchEvent(element, shownOffcanvasEvent);\n\n  toggleOffCanvasDismiss(self, true);\n  focus(element);\n}\n\n/**\n * Handles the `transitionend` when hiding the offcanvas.\n *\n * @param {Offcanvas} self the `Offcanvas` instance\n */\nfunction hideOffcanvasComplete(self) {\n  const { element, triggers } = self;\n\n  setAttribute(element, ariaHidden, 'true');\n  removeAttribute(element, ariaModal);\n  removeAttribute(element, 'role');\n  // @ts-ignore\n  element.style.visibility = '';\n\n  if (triggers.length) {\n    triggers.forEach((btn) => setAttribute(btn, ariaExpanded, 'false'));\n    const visibleTrigger = triggers.find((x) => isVisible(x));\n    if (visibleTrigger) focus(visibleTrigger);\n  }\n\n  removeOverlay(element);\n\n  dispatchEvent(element, hiddenOffcanvasEvent);\n  removeClass(element, offcanvasTogglingClass);\n\n  // must check for open instances\n  if (!getCurrentOpen(element)) {\n    toggleOffCanvasDismiss(self);\n  }\n}\n\n// OFFCANVAS DEFINITION\n// ====================\n/** Returns a new `Offcanvas` instance. */\nclass Offcanvas extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target usually an `.offcanvas` element\n   * @param {BSN.Options.Offcanvas=} config instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    const self = this;\n\n    // instance element\n    const { element } = self;\n\n    // all the triggering buttons\n    /** @type {(HTMLElement | Element)[]} */\n    self.triggers = [...querySelectorAll(offcanvasToggleSelector)]\n      .filter((btn) => getTargetElement(btn) === element);\n\n    // additional instance property\n    /** @type {HTMLBodyElement | HTMLElement | Element} */\n    // @ts-ignore\n    self.container = getElementContainer(element);\n    /** @type {(HTMLElement | Element)?} */\n    self.relatedTarget = null;\n\n    // attach event listeners\n    toggleOffcanvasEvents(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return offcanvasComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return offcanvasDefaults; }\r\n  /* eslint-enable */\n\n  // OFFCANVAS PUBLIC METHODS\n  // ========================\n  /** Shows or hides the offcanvas from the user. */\n  toggle() {\n    const self = this;\n    if (hasClass(self.element, showClass)) self.hide();\n    else self.show();\n  }\n\n  /** Shows the offcanvas to the user. */\n  show() {\n    const self = this;\n    const {\n      element, options, container, relatedTarget,\n    } = self;\n    let overlayDelay = 0;\n\n    if (hasClass(element, showClass)) return;\n\n    showOffcanvasEvent.relatedTarget = relatedTarget;\n    shownOffcanvasEvent.relatedTarget = relatedTarget;\n    dispatchEvent(element, showOffcanvasEvent);\n    if (showOffcanvasEvent.defaultPrevented) return;\n\n    // we elegantly hide any opened modal/offcanvas\n    const currentOpen = getCurrentOpen(element);\n    if (currentOpen && currentOpen !== element) {\n      const this1 = getOffcanvasInstance(currentOpen);\n      const that1 = this1 || getInstance(currentOpen, 'Modal');\n      that1.hide();\n    }\n\n    if (options.backdrop) {\n      if (!currentOpen) {\n        appendOverlay(container, true);\n      } else {\n        toggleOverlayType();\n      }\n      overlayDelay = getElementTransitionDuration(overlay);\n      if (!hasClass(overlay, showClass)) showOverlay();\n\n      setTimeout(() => beforeOffcanvasShow(self), overlayDelay);\n    } else {\n      beforeOffcanvasShow(self);\n      if (currentOpen && hasClass(overlay, showClass)) {\n        hideOverlay();\n      }\n    }\n  }\n\n  /**\n   * Hides the offcanvas from the user.\n   * @param {boolean=} force when `true` it will skip animation\n   */\n  hide(force) {\n    const self = this;\n    const { element, relatedTarget } = self;\n\n    if (!hasClass(element, showClass)) return;\n\n    hideOffcanvasEvent.relatedTarget = relatedTarget;\n    hiddenOffcanvasEvent.relatedTarget = relatedTarget;\n    dispatchEvent(element, hideOffcanvasEvent);\n    if (hideOffcanvasEvent.defaultPrevented) return;\n\n    addClass(element, offcanvasTogglingClass);\n    removeClass(element, showClass);\n\n    if (!force) {\n      emulateTransitionEnd(element, () => beforeOffcanvasHide(self));\n    } else beforeOffcanvasHide(self);\n  }\n\n  /** Removes the `Offcanvas` from the target element. */\n  dispose() {\n    const self = this;\n    self.hide(true);\n    toggleOffcanvasEvents(self);\n    super.dispose();\n  }\n}\n\nObjectAssign(Offcanvas, {\n  selector: offcanvasSelector,\n  init: offcanvasInitCallback,\n  getInstance: getOffcanvasInstance,\n});\n\n/** @type {string} */\nconst popoverString = 'popover';\n\n/** @type {string} */\nconst popoverComponent = 'Popover';\n\n/** @type {string} */\nconst tooltipString = 'tooltip';\n\n/**\n * Returns a template for Popover / Tooltip.\n *\n * @param {string} tipType the expected markup type\n * @returns {string} the template markup\n */\nfunction getTipTemplate(tipType) {\n  const isTooltip = tipType === tooltipString;\n  const bodyClass = isTooltip ? `${tipType}-inner` : `${tipType}-body`;\n  const header = !isTooltip ? `<h3 class=\"${tipType}-header\"></h3>` : '';\n  const arrow = `<div class=\"${tipType}-arrow\"></div>`;\n  const body = `<div class=\"${bodyClass}\"></div>`;\n  return `<div class=\"${tipType}\" role=\"${tooltipString}\">${header + arrow + body}</div>`;\n}\n\n/**\n * Checks if an element is an `<svg>` (or any type of SVG element),\n * `<img>` or `<video>`.\n *\n * *Tooltip* / *Popover* works different with media elements.\n * @param {any} element the target element\n * @returns {boolean} the query result\n */\nconst isMedia = (element) => element\n  && [SVGElement, HTMLImageElement, HTMLVideoElement]\n    .some((mediaType) => element instanceof mediaType);\n\n/**\n * Returns an `{x,y}` object with the target\n * `HTMLElement` / `Node` scroll position.\n *\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element | Window} element target node / element\n * @returns {{x: number, y: number}} the scroll tuple\n */\nfunction getNodeScroll(element) {\n  const isWin = 'scrollX' in element;\n  const x = isWin ? element.scrollX : element.scrollLeft;\n  const y = isWin ? element.scrollY : element.scrollTop;\n\n  return { x, y };\n}\n\n/**\n * Checks if a target `HTMLElement` is affected by scale.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement} element target\n * @returns {boolean} the query result\n */\nfunction isScaledElement(element) {\n  const { width, height } = getBoundingClientRect(element);\n  const { offsetWidth, offsetHeight } = element;\n  return Math.round(width) !== offsetWidth\n    || Math.round(height) !== offsetHeight;\n}\n\n/**\n * Returns the rect relative to an offset parent.\n * @see https://github.com/floating-ui/floating-ui\n *\n * @param {HTMLElement | Element} element target\n * @param {HTMLElement | Element | Window} offsetParent the container / offset parent\n * @param {{x: number, y: number}} scroll\n * @returns {SHORTER.OffsetRect}\n */\nfunction getRectRelativeToOffsetParent(element, offsetParent, scroll) {\n  const isParentAnElement = offsetParent instanceof HTMLElement;\n  const rect = getBoundingClientRect(element, isParentAnElement && isScaledElement(offsetParent));\n  const offsets = { x: 0, y: 0 };\n\n  if (isParentAnElement) {\n    const offsetRect = getBoundingClientRect(offsetParent, true);\n    offsets.x = offsetRect.x + offsetParent.clientLeft;\n    offsets.y = offsetRect.y + offsetParent.clientTop;\n  }\n\n  return {\n    x: rect.left + scroll.x - offsets.x,\n    y: rect.top + scroll.y - offsets.y,\n    width: rect.width,\n    height: rect.height,\n  };\n}\n\n/** @type {Record<string, string>} */\nvar tipClassPositions = {\n  top: 'top',\n  bottom: 'bottom',\n  left: 'start',\n  right: 'end',\n};\n\n/**\n * Style popovers and tooltips.\n * @param {BSN.Tooltip | BSN.Popover} self the `Popover` / `Tooltip` instance\n * @param {PointerEvent=} e event object\n */\nfunction styleTip(self, e) {\n  const tipClasses = /\\b(top|bottom|start|end)+/;\n  const {\n    element, tooltip, options, arrow, offsetParent,\n  } = self;\n  const tipPositions = { ...tipClassPositions };\n\n  // reset tooltip style (top: 0, left: 0 works best)\n  setElementStyle(tooltip, { top: '0px', left: '0px', right: '' });\n  // @ts-ignore\n  const isPopover = self.name === popoverComponent;\n  const tipWidth = tooltip.offsetWidth;\n  const tipHeight = tooltip.offsetHeight;\n  const RTL = isRTL(element);\n  if (RTL) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n  const documentElement = getDocumentElement(element);\n  const windowWidth = documentElement.clientWidth;\n  const windowHeight = documentElement.clientHeight;\n  const { container } = options;\n  let { placement } = options;\n  // const parentIsBody = container.tagName === 'BODY';\n  const { left: parentLeft, right: parentRight } = getBoundingClientRect(container, true);\n  const parentWidth = container.clientWidth;\n  const parentPosition = getElementStyle(container, 'position');\n  // const absoluteParent = parentPosition === 'absolute';\n  // const fixedParent = parentPosition === 'fixed';\n  // const absoluteTarget = getElementStyle(element, 'position') === 'absolute';\n  const staticParent = parentPosition === 'static';\n  const stickyFixedParent = ['sticky', 'fixed'].includes(parentPosition);\n  const leftBoundry = 0;\n  const rightBoundry = stickyFixedParent ? parentWidth + parentLeft\n    : parentWidth + parentLeft + (windowWidth - parentRight) - 1;\n  const {\n    width: elemWidth,\n    height: elemHeight,\n    left: elemRectLeft,\n    right: elemRectRight,\n    top: elemRectTop,\n  } = getBoundingClientRect(element, true);\n\n  const scroll = getNodeScroll(offsetParent);\n  const { x, y } = getRectRelativeToOffsetParent(element, offsetParent, scroll);\n  // reset arrow style\n  setElementStyle(arrow, { top: '', left: '', right: '' });\n  let topPosition;\n  let leftPosition;\n  let rightPosition;\n  let arrowTop;\n  let arrowLeft;\n  let arrowRight;\n\n  const arrowWidth = arrow.offsetWidth || 0;\n  const arrowHeight = arrow.offsetHeight || 0;\n  const arrowAdjust = arrowWidth / 2;\n\n  // check placement\n  let topExceed = elemRectTop - tipHeight - arrowHeight < 0;\n  let bottomExceed = elemRectTop + tipHeight + elemHeight\n    + arrowHeight >= windowHeight;\n  let leftExceed = elemRectLeft - tipWidth - arrowWidth < leftBoundry;\n  let rightExceed = elemRectLeft + tipWidth + elemWidth\n    + arrowWidth >= rightBoundry;\n\n  const horizontal = ['left', 'right'];\n  const vertical = ['top', 'bottom'];\n  topExceed = horizontal.includes(placement)\n    ? elemRectTop + elemHeight / 2 - tipHeight / 2 - arrowHeight < 0\n    : topExceed;\n  bottomExceed = horizontal.includes(placement)\n    ? elemRectTop + tipHeight / 2 + elemHeight / 2 + arrowHeight >= windowHeight\n    : bottomExceed;\n  leftExceed = vertical.includes(placement)\n    ? elemRectLeft + elemWidth / 2 - tipWidth / 2 < leftBoundry\n    : leftExceed;\n  rightExceed = vertical.includes(placement)\n    ? elemRectLeft + tipWidth / 2 + elemWidth / 2 >= rightBoundry\n    : rightExceed;\n\n  // recompute placement\n  // first, when both left and right limits are exceeded, we fall back to top|bottom\n  placement = (horizontal.includes(placement)) && leftExceed && rightExceed ? 'top' : placement;\n  placement = placement === 'top' && topExceed ? 'bottom' : placement;\n  placement = placement === 'bottom' && bottomExceed ? 'top' : placement;\n  placement = placement === 'left' && leftExceed ? 'right' : placement;\n  placement = placement === 'right' && rightExceed ? 'left' : placement;\n\n  // update tooltip/popover class\n  if (!tooltip.className.includes(placement)) {\n    tooltip.className = tooltip.className.replace(tipClasses, tipPositions[placement]);\n  }\n\n  // compute tooltip / popover coordinates\n  if (horizontal.includes(placement)) { // secondary|side positions\n    if (placement === 'left') { // LEFT\n      leftPosition = x - tipWidth - (isPopover ? arrowWidth : 0);\n    } else { // RIGHT\n      leftPosition = x + elemWidth + (isPopover ? arrowWidth : 0);\n    }\n\n    // adjust top and arrow\n    if (topExceed) {\n      topPosition = y;\n      arrowTop = elemHeight / 2 - arrowWidth;\n    } else if (bottomExceed) {\n      topPosition = y - tipHeight + elemHeight;\n      arrowTop = tipHeight - elemHeight / 2 - arrowWidth;\n    } else {\n      topPosition = y - tipHeight / 2 + elemHeight / 2;\n      arrowTop = tipHeight / 2 - arrowHeight / 2;\n    }\n  } else if (vertical.includes(placement)) {\n    if (e && isMedia(element)) {\n      let eX = 0;\n      let eY = 0;\n      if (staticParent) {\n        eX = e.pageX;\n        eY = e.pageY;\n      } else {\n        eX = e.clientX - (RTL ? 0 : container.offsetLeft) + scroll.x;\n        eY = e.clientY - container.offsetTop + scroll.y;\n      }\n\n      // some weird RTL bug\n      const scrollbarWidth = parentRight - parentWidth;\n      eX -= RTL && stickyFixedParent ? scrollbarWidth : 0;\n\n      if (placement === 'top') {\n        topPosition = eY - tipHeight - arrowWidth;\n      } else {\n        topPosition = eY + arrowWidth;\n      }\n\n      // adjust (left | right) and also the arrow\n      if (e.clientX - tipWidth / 2 < leftBoundry) {\n        leftPosition = 0;\n        arrowLeft = eX - arrowAdjust;\n      } else if (e.clientX + tipWidth / 2 > rightBoundry) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = rightBoundry - eX - arrowAdjust;\n      // normal top/bottom\n      } else {\n        leftPosition = eX - tipWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    } else {\n      if (placement === 'top') {\n        topPosition = y - tipHeight - (isPopover ? arrowHeight : 0);\n      } else { // BOTTOM\n        topPosition = y + elemHeight + (isPopover ? arrowHeight : 0);\n      }\n\n      // adjust left | right and also the arrow\n      if (leftExceed) {\n        leftPosition = 0;\n        arrowLeft = x + elemWidth / 2 - arrowAdjust;\n      } else if (rightExceed) {\n        leftPosition = 'auto';\n        rightPosition = 0;\n        arrowRight = elemWidth / 2 + rightBoundry - elemRectRight - arrowAdjust;\n      } else {\n        leftPosition = x - tipWidth / 2 + elemWidth / 2;\n        arrowLeft = tipWidth / 2 - arrowAdjust;\n      }\n    }\n  }\n\n  // apply style to tooltip/popover\n  setElementStyle(tooltip, {\n    top: `${topPosition}px`,\n    left: leftPosition === 'auto' ? leftPosition : `${leftPosition}px`,\n    right: rightPosition !== undefined ? `${rightPosition}px` : '',\n  });\n\n  // update arrow placement\n  if (arrow instanceof HTMLElement) {\n    if (arrowTop !== undefined) {\n      arrow.style.top = `${arrowTop}px`;\n    }\n    if (arrowLeft !== undefined) {\n      arrow.style.left = `${arrowLeft}px`;\n    } else if (arrowRight !== undefined) {\n      arrow.style.right = `${arrowRight}px`;\n    }\n  }\n}\n\nconst tooltipDefaults = {\n  /** @type {string} */\n  template: getTipTemplate(tooltipString),\n  /** @type {string?} */\n  title: null, // string\n  /** @type {string?} */\n  customClass: null, // string | null\n  /** @type {string} */\n  trigger: 'hover focus',\n  /** @type {string?} */\n  placement: 'top', // string\n  /** @type {((c:string)=>string)?} */\n  sanitizeFn: null, // function\n  /** @type {boolean} */\n  animation: true, // bool\n  /** @type {number} */\n  delay: 200, // number\n  /** @type {(HTMLElement | Element)?} */\n  container: null,\n};\n\n/**\n * A global namespace for aria-describedby.\n * @type {string}\n */\nconst ariaDescribedBy = 'aria-describedby';\n\n/**\n * A global namespace for `mousedown` event.\n * @type {string}\n */\nconst mousedownEvent = 'mousedown';\n\n/**\n * A global namespace for `mousemove` event.\n * @type {string}\n */\nconst mousemoveEvent = 'mousemove';\n\n/**\n * A global namespace for `focusin` event.\n * @type {string}\n */\nconst focusinEvent = 'focusin';\n\n/**\n * A global namespace for `focusout` event.\n * @type {string}\n */\nconst focusoutEvent = 'focusout';\n\n/**\n * A global namespace for `hover` event.\n * @type {string}\n */\nconst mousehoverEvent = 'hover';\n\n// @ts-ignore\nconst { userAgentData: uaDATA } = navigator;\n\n/**\n * A global namespace for `userAgentData` object.\n */\nconst userAgentData = uaDATA;\n\nconst { userAgent: userAgentString } = navigator;\n\n/**\n * A global namespace for `navigator.userAgent` string.\n */\nconst userAgent = userAgentString;\n\nconst appleBrands = /(iPhone|iPod|iPad)/;\n\n/**\n * A global `boolean` for Apple browsers.\n * @type {boolean}\n */\nconst isApple = !userAgentData ? appleBrands.test(userAgent)\n  : userAgentData.brands.some((/** @type {Record<string, any>} */x) => appleBrands.test(x.brand));\n\nlet elementUID = 1;\nconst elementIDMap = new Map();\n\n/**\n * Returns a unique identifier for popover, tooltip, scrollspy.\n *\n * @param {HTMLElement | Element} element target element\n * @param {string=} key predefined key\n * @returns {number} an existing or new unique ID\n */\nfunction getUID(element, key) {\n  elementUID += 1;\n  let elMap = elementIDMap.get(element);\n  let result = elementUID;\n\n  if (elMap) {\n    result = key && key.length && elMap.get && elMap.get(key)\n      ? elMap.get(key) : elMap;\n  } else if (key && key.length) {\n    if (!elMap) {\n      elementIDMap.set(element, new Map());\n      elMap = elementIDMap.get(element);\n    }\n    elMap.set(key, result);\n  } else {\n    elementIDMap.set(element, result);\n  }\n  return result;\n}\n\n/**\n * Global namespace for `data-bs-title` attribute.\n */\nconst dataOriginalTitle = 'data-original-title';\n\n/** @type {string} */\nconst tooltipComponent = 'Tooltip';\n\n/**\n * Append an existing `Element` to Popover / Tooltip component or HTML\n * markup string to be parsed & sanitized to be used as popover / tooltip content.\n *\n * @param {HTMLElement | Element} element target\n * @param {HTMLElement | Element | string} content the `Element` to append / string\n * @param {ReturnType<any>} sanitizeFn a function to sanitize string content\n */\nfunction setHtml(element, content, sanitizeFn) {\n  if (typeof content === 'string' && !content.length) return;\n\n  if (typeof content === 'string') {\n    let dirty = content.trim(); // fixing #233\n    if (typeof sanitizeFn === 'function') dirty = sanitizeFn(dirty);\n\n    const domParser = new DOMParser();\n    const tempDocument = domParser.parseFromString(dirty, 'text/html');\n    const { body } = tempDocument;\n    const method = body.children.length ? 'innerHTML' : 'innerText';\n    // @ts-ignore\n    element[method] = body[method];\n  } else if (content instanceof HTMLElement) {\n    element.append(content);\n  }\n}\n\n/**\n * Creates a new tooltip / popover.\n *\n * @param {BSN.Popover | BSN.Tooltip} self the `Popover` instance\n */\nfunction createTip(self) {\n  const { id, element, options } = self;\n  const {\n    animation, customClass, sanitizeFn, placement, dismissible,\n  } = options;\n  let { title, content } = options;\n  const isTooltip = self.name === tooltipComponent;\n  const tipString = isTooltip ? tooltipString : popoverString;\n  const { template, btnClose } = options;\n  const tipPositions = { ...tipClassPositions };\n\n  if (isRTL(element)) {\n    tipPositions.left = 'end';\n    tipPositions.right = 'start';\n  }\n\n  // set initial popover class\n  const placementClass = `bs-${tipString}-${tipPositions[placement]}`;\n\n  // load template\n  /** @type {(HTMLElement | Element)?} */\n  let popoverTemplate;\n  if ([Element, HTMLElement].some((x) => template instanceof x)) {\n    popoverTemplate = template;\n  } else {\n    const htmlMarkup = getDocument(element).createElement('div');\n    setHtml(htmlMarkup, template, sanitizeFn);\n    popoverTemplate = htmlMarkup.firstElementChild;\n  }\n\n  // set popover markup\n  self.tooltip = popoverTemplate && popoverTemplate.cloneNode(true);\n\n  const { tooltip } = self;\n\n  // set id and role attributes\n  setAttribute(tooltip, 'id', id);\n  setAttribute(tooltip, 'role', tooltipString);\n\n  const bodyClass = isTooltip ? `${tooltipString}-inner` : `${popoverString}-body`;\n  const tooltipHeader = isTooltip ? null : querySelector(`.${popoverString}-header`, tooltip);\n  const tooltipBody = querySelector(`.${bodyClass}`, tooltip);\n\n  // set arrow and enable access for styleTip\n  self.arrow = querySelector(`.${tipString}-arrow`, tooltip);\n\n  // set dismissible button\n  if (dismissible) {\n    if (title) {\n      if (title instanceof HTMLElement) setHtml(title, btnClose, sanitizeFn);\n      else title += btnClose;\n    } else {\n      if (tooltipHeader) tooltipHeader.remove();\n      if (content instanceof HTMLElement) setHtml(content, btnClose, sanitizeFn);\n      else content += btnClose;\n    }\n  }\n\n  // fill the template with content from options / data attributes\n  // also sanitize title && content\n  if (!isTooltip) {\n    if (title && tooltipHeader) setHtml(tooltipHeader, title, sanitizeFn);\n    if (content && tooltipBody) setHtml(tooltipBody, content, sanitizeFn);\n    // @ts-ignore -- set btn\n    self.btn = querySelector('.btn-close', tooltip);\n  } else if (title && tooltipBody) setHtml(tooltipBody, title, sanitizeFn);\n\n  // set popover animation and placement\n  if (!hasClass(tooltip, tipString)) addClass(tooltip, tipString);\n  if (animation && !hasClass(tooltip, fadeClass)) addClass(tooltip, fadeClass);\n  if (customClass && !hasClass(tooltip, customClass)) {\n    addClass(tooltip, customClass);\n  }\n  if (!hasClass(tooltip, placementClass)) addClass(tooltip, placementClass);\n}\n\n/**\n * @param {(HTMLElement | Element)?} tip target\n * @param {HTMLElement | ParentNode} container parent container\n * @returns {boolean}\n */\nfunction isVisibleTip(tip, container) {\n  return tip instanceof HTMLElement && container.contains(tip);\n}\n\n/* Native JavaScript for Bootstrap 5 | Tooltip\n---------------------------------------------- */\n\n// TOOLTIP PRIVATE GC\n// ==================\nconst tooltipSelector = `[${dataBsToggle}=\"${tooltipString}\"],[data-tip=\"${tooltipString}\"]`;\nconst titleAttr = 'title';\n\n/**\n * Static method which returns an existing `Tooltip` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Tooltip>}\n */\nlet getTooltipInstance = (element) => getInstance(element, tooltipComponent);\n\n/**\n * A `Tooltip` initialization callback.\n * @type {BSN.InitCallback<Tooltip>}\n */\nconst tooltipInitCallback = (element) => new Tooltip(element);\n\n// TOOLTIP PRIVATE METHODS\n// =======================\n/**\n * Removes the tooltip from the DOM.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction removeTooltip(self) {\n  const { element, tooltip } = self;\n  removeAttribute(element, ariaDescribedBy);\n  tooltip.remove();\n}\n\n/**\n * Executes after the instance has been disposed.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction disposeTooltipComplete(self) {\n  const { element } = self;\n  toggleTooltipHandlers(self);\n\n  if (element.hasAttribute(dataOriginalTitle) && self.name === tooltipString) {\n    toggleTooltipTitle(self);\n  }\n}\n\n/**\n * Toggles on/off the special `Tooltip` event listeners.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleTooltipAction(self, add) {\n  const action = add ? on : off;\n  const { element } = self;\n\n  action(getDocument(element), touchstartEvent, tooltipTouchHandler, passiveHandler);\n\n  if (!isMedia(element)) {\n    [scrollEvent, resizeEvent].forEach((ev) => {\n      // @ts-ignore\n      action(getWindow(element), ev, self.update, passiveHandler);\n    });\n  }\n}\n\n/**\n * Executes after the tooltip was shown to the user.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction tooltipShownAction(self) {\n  const { element } = self;\n  const shownTooltipEvent = OriginalEvent(`shown.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self, true);\n  dispatchEvent(element, shownTooltipEvent);\n  Timer.clear(element, 'in');\n}\n\n/**\n * Executes after the tooltip was hidden to the user.\n *\n * @param {Tooltip} self the `Tooltip` instance\n */\nfunction tooltipHiddenAction(self) {\n  const { element } = self;\n  const hiddenTooltipEvent = OriginalEvent(`hidden.bs.${toLowerCase(self.name)}`);\n\n  toggleTooltipAction(self);\n  removeTooltip(self);\n  dispatchEvent(element, hiddenTooltipEvent);\n  Timer.clear(element, 'out');\n}\n\n/**\n * Toggles on/off the `Tooltip` event listeners.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleTooltipHandlers(self, add) {\n  const action = add ? on : off;\n  // @ts-ignore -- btn is only for dismissible popover\n  const { element, options, btn } = self;\n  const { trigger, dismissible } = options;\n\n  if (trigger.includes('manual')) return;\n\n  self.enabled = !!add;\n\n  /** @type {string[]} */\n  const triggerOptions = trigger.split(' ');\n  const elemIsMedia = isMedia(element);\n\n  if (elemIsMedia) {\n    action(element, mousemoveEvent, self.update, passiveHandler);\n  }\n\n  triggerOptions.forEach((tr) => {\n    if (elemIsMedia || tr === mousehoverEvent) {\n      action(element, mousedownEvent, self.show);\n      action(element, mouseenterEvent, self.show);\n\n      if (dismissible && btn) {\n        action(btn, mouseclickEvent, self.hide);\n      } else {\n        action(element, mouseleaveEvent, self.hide);\n        action(getDocument(element), touchstartEvent, tooltipTouchHandler, passiveHandler);\n      }\n    } else if (tr === mouseclickEvent) {\n      action(element, tr, (!dismissible ? self.toggle : self.show));\n    } else if (tr === focusEvent) {\n      action(element, focusinEvent, self.show);\n      if (!dismissible) action(element, focusoutEvent, self.hide);\n      if (isApple) action(element, mouseclickEvent, () => focus(element));\n    }\n  });\n}\n\n/**\n * Toggles on/off the `Tooltip` event listeners that hide/update the tooltip.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {boolean=} add when `true`, event listeners are added\n */\nfunction toggleTooltipOpenHandlers(self, add) {\n  const action = add ? on : off;\n  const { element, options, offsetParent } = self;\n  const { container } = options;\n  const { offsetHeight, scrollHeight } = container;\n  const parentModal = closest(element, `.${modalString}`);\n  const parentOffcanvas = closest(element, `.${offcanvasString}`);\n\n  if (!isMedia(element)) {\n    const win = getWindow(element);\n    const overflow = offsetHeight !== scrollHeight;\n    const scrollTarget = overflow || offsetParent !== win ? container : win;\n    // @ts-ignore\n    action(win, resizeEvent, self.update, passiveHandler);\n    action(scrollTarget, scrollEvent, self.update, passiveHandler);\n  }\n\n  // dismiss tooltips inside modal / offcanvas\n  if (parentModal) on(parentModal, `hide.bs.${modalString}`, self.hide);\n  if (parentOffcanvas) on(parentOffcanvas, `hide.bs.${offcanvasString}`, self.hide);\n}\n\n/**\n * Toggles the `title` and `data-original-title` attributes.\n *\n * @param {Tooltip} self the `Tooltip` instance\n * @param {string=} content when `true`, event listeners are added\n */\nfunction toggleTooltipTitle(self, content) {\n  // [0 - add, 1 - remove] | [0 - remove, 1 - add]\n  const titleAtt = [dataOriginalTitle, titleAttr];\n  const { element } = self;\n\n  setAttribute(element, titleAtt[content ? 0 : 1],\n    // @ts-ignore\n    (content || getAttribute(element, titleAtt[0])));\n  removeAttribute(element, titleAtt[content ? 1 : 0]);\n}\n\n// TOOLTIP EVENT HANDLERS\n// ======================\n/**\n * Handles the `touchstart` event listener for `Tooltip`\n * @this {Tooltip}\n * @param {TouchEvent} e the `Event` object\n */\nfunction tooltipTouchHandler({ target }) {\n  const { tooltip, element } = this;\n  // @ts-ignore\n  if (tooltip.contains(target) || target === element || element.contains(target)) ; else {\n    this.hide();\n  }\n}\n\n// TOOLTIP DEFINITION\n// ==================\n/** Creates a new `Tooltip` instance. */\nclass Tooltip extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   * @param {BSN.Options.Tooltip=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n\n    // bind\n    const self = this;\n    const { element } = self;\n    const isTooltip = self.name === tooltipComponent;\n    const tipString = isTooltip ? tooltipString : popoverString;\n    const tipComponent = isTooltip ? tooltipComponent : popoverComponent;\n\n    getTooltipInstance = (elem) => getInstance(elem, tipComponent);\n\n    // additional properties\n    /** @type {any} */\n    self.tooltip = {};\n    if (!isTooltip) {\n      /** @type {any?} */\n      // @ts-ignore\n      self.btn = null;\n    }\n    /** @type {any} */\n    self.arrow = {};\n    /** @type {any} */\n    self.offsetParent = {};\n    /** @type {boolean} */\n    self.enabled = true;\n    /** @type {string} Set unique ID for `aria-describedby`. */\n    self.id = `${tipString}-${getUID(element, tipString)}`;\n\n    // instance options\n    const { options } = self;\n\n    // invalidate\n    if ((!options.title && isTooltip) || (!isTooltip && !options.content)) return;\n\n    const container = querySelector(options.container);\n    const idealContainer = getElementContainer(element);\n\n    // bypass container option when its position is static/relative\n    self.options.container = !container || (container\n      && ['static', 'relative'].includes(getElementStyle(container, 'position')))\n      ? idealContainer\n      : container || getDocumentBody(element);\n\n    // reset default options\n    tooltipDefaults[titleAttr] = null;\n\n    // all functions bind\n    tooltipTouchHandler.bind(self);\n    self.update = self.update.bind(self);\n    self.show = self.show.bind(self);\n    self.hide = self.hide.bind(self);\n    self.toggle = self.toggle.bind(self);\n\n    // set title attributes and add event listeners\n    if (element.hasAttribute(titleAttr) && isTooltip) {\n      toggleTooltipTitle(self, options.title);\n    }\n\n    // create tooltip here\n    createTip(self);\n\n    // attach events\n    toggleTooltipHandlers(self, true);\n  }\n\n  /* eslint-disable */\n  /**\n   * Returns component name string.\n   * @readonly @static\n   */\n  get name() { return tooltipComponent; }\n  /**\n   * Returns component default options.\n   * @readonly @static\n   */\n  get defaults() { return tooltipDefaults; }\n  /* eslint-enable */\n\n  // TOOLTIP PUBLIC METHODS\n  // ======================\n  /**\n   * Shows the tooltip.\n   *\n   * @param {Event=} e the `Event` object\n   * @this {Tooltip}\n   */\n  show(e) {\n    const self = this;\n    const {\n      options, tooltip, element, id,\n    } = self;\n    const { container, animation } = options;\n    const outTimer = Timer.get(element, 'out');\n\n    Timer.clear(element, 'out');\n\n    if (tooltip && !outTimer && !isVisibleTip(tooltip, container)) {\n      Timer.set(element, () => {\n        const showTooltipEvent = OriginalEvent(`show.bs.${toLowerCase(self.name)}`);\n        dispatchEvent(element, showTooltipEvent);\n        if (showTooltipEvent.defaultPrevented) return;\n\n        // append to container\n        container.append(tooltip);\n        setAttribute(element, ariaDescribedBy, `#${id}`);\n        // set offsetParent\n        self.offsetParent = getElementContainer(tooltip, true);\n\n        self.update(e);\n        toggleTooltipOpenHandlers(self, true);\n\n        if (!hasClass(tooltip, showClass)) addClass(tooltip, showClass);\n        if (animation) emulateTransitionEnd(tooltip, () => tooltipShownAction(self));\n        else tooltipShownAction(self);\n      }, 17, 'in');\n    }\n  }\n\n  /**\n   * Hides the tooltip.\n   *\n   * @this {Tooltip}\n   */\n  hide() {\n    const self = this;\n    const { options, tooltip, element } = self;\n    const { container, animation, delay } = options;\n\n    Timer.clear(element, 'in');\n\n    if (tooltip && isVisibleTip(tooltip, container)) {\n      Timer.set(element, () => {\n        const hideTooltipEvent = OriginalEvent(`hide.bs.${toLowerCase(self.name)}`);\n        dispatchEvent(element, hideTooltipEvent);\n\n        if (hideTooltipEvent.defaultPrevented) return;\n\n        // @ts-ignore\n        removeClass(tooltip, showClass);\n        toggleTooltipOpenHandlers(self);\n\n        if (animation) emulateTransitionEnd(tooltip, () => tooltipHiddenAction(self));\n        else tooltipHiddenAction(self);\n      }, delay + 17, 'out');\n    }\n  }\n\n  /**\n   * Updates the tooltip position.\n   *\n   * @param {Event=} e the `Event` object\n   * @this {Tooltip} the `Tooltip` instance\n   */\n  update(e) {\n    // @ts-ignore\n    styleTip(this, e);\n  }\n\n  /**\n   * Toggles the tooltip visibility.\n   *\n   * @param {Event=} e the `Event` object\n   * @this {Tooltip} the instance\n   */\n  toggle(e) {\n    const self = this;\n    const { tooltip, options } = self;\n\n    if (!isVisibleTip(tooltip, options.container)) self.show(e);\n    else self.hide();\n  }\n\n  /** Enables the tooltip. */\n  enable() {\n    const self = this;\n    const { enabled } = self;\n    if (!enabled) {\n      toggleTooltipHandlers(self, true);\n      self.enabled = !enabled;\n    }\n  }\n\n  /** Disables the tooltip. */\n  disable() {\n    const self = this;\n    const {\n      element, tooltip, options, enabled,\n    } = self;\n    const { animation, container, delay } = options;\n    if (enabled) {\n      if (isVisibleTip(tooltip, container) && animation) {\n        self.hide();\n\n        Timer.set(element, () => {\n          toggleTooltipHandlers(self);\n          Timer.clear(element, tooltipString);\n        }, getElementTransitionDuration(tooltip) + delay + 17, tooltipString);\n      } else {\n        toggleTooltipHandlers(self);\n      }\n      self.enabled = !enabled;\n    }\n  }\n\n  /** Toggles the `disabled` property. */\n  toggleEnabled() {\n    const self = this;\n    if (!self.enabled) self.enable();\n    else self.disable();\n  }\n\n  /** Removes the `Tooltip` from the target element. */\n  dispose() {\n    const self = this;\n    const { tooltip, options } = self;\n\n    if (options.animation && isVisibleTip(tooltip, options.container)) {\n      options.delay = 0; // reset delay\n      self.hide();\n      emulateTransitionEnd(tooltip, () => disposeTooltipComplete(self));\n    } else {\n      disposeTooltipComplete(self);\n    }\n    super.dispose();\n  }\n}\n\nObjectAssign(Tooltip, {\n  selector: tooltipSelector,\n  init: tooltipInitCallback,\n  getInstance: getTooltipInstance,\n  styleTip,\n});\n\n/* Native JavaScript for Bootstrap 5 | Popover\n---------------------------------------------- */\n\n// POPOVER PRIVATE GC\n// ==================\nconst popoverSelector = `[${dataBsToggle}=\"${popoverString}\"],[data-tip=\"${popoverString}\"]`;\n\nconst popoverDefaults = {\n  ...tooltipDefaults,\n  /** @type {string} */\n  template: getTipTemplate(popoverString),\n  /** @type {string} */\n  btnClose: '<button class=\"btn-close\" aria-label=\"Close\"></button>',\n  /** @type {boolean} */\n  dismissible: false,\n  /** @type {string?} */\n  content: null,\n};\n\n// POPOVER DEFINITION\n// ==================\n/** Returns a new `Popover` instance. */\nclass Popover extends Tooltip {\n  /* eslint-disable -- we want to specify Popover Options */\r\n  /**\r\n   * @param {HTMLElement | Element | string} target the target element\r\n   * @param {BSN.Options.Popover=} config the instance options\r\n   */\r\n  constructor(target, config) {\r\n    super(target, config);\r\n  }\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */ \r\n  get name() { return popoverComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return popoverDefaults; }\r\n  /* eslint-enable */\n\n  /* extend original `show()` */\n  show() {\n    super.show();\n    // @ts-ignore -- btn only exists within dismissible popover\n    const { options, btn } = this;\n    if (options.dismissible && btn) setTimeout(() => focus(btn), 17);\n  }\n}\n\n/**\n * Static method which returns an existing `Popover` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Popover>}\n */\nconst getPopoverInstance = (element) => getInstance(element, popoverComponent);\n\n/**\n * A `Popover` initialization callback.\n * @type {BSN.InitCallback<Popover>}\n */\nconst popoverInitCallback = (element) => new Popover(element);\n\nObjectAssign(Popover, {\n  selector: popoverSelector,\n  init: popoverInitCallback,\n  getInstance: getPopoverInstance,\n  styleTip,\n});\n\n/**\n * Shortcut for `HTMLElement.getElementsByTagName` method. Some `Node` elements\n * like `ShadowRoot` do not support `getElementsByTagName`.\n *\n * @param {string} selector the tag name\n * @param {(HTMLElement | Element | Document)=} parent optional Element to look into\n * @return {HTMLCollectionOf<HTMLElement | Element>} the 'HTMLCollection'\n */\nfunction getElementsByTagName(selector, parent) {\n  const lookUp = parent && parentNodes\n    .some((x) => parent instanceof x) ? parent : getDocument();\n  return lookUp.getElementsByTagName(selector);\n}\n\n/** @type {string} */\nconst scrollspyString = 'scrollspy';\n\n/** @type {string} */\nconst scrollspyComponent = 'ScrollSpy';\n\n/* Native JavaScript for Bootstrap 5 | ScrollSpy\n------------------------------------------------ */\n\n// console.log(typeof addEventListener)\n\n// SCROLLSPY PRIVATE GC\n// ====================\nconst scrollspySelector = '[data-bs-spy=\"scroll\"]';\n\nconst scrollspyDefaults = {\n  offset: 10,\n  target: null,\n};\n\n/**\n * Static method which returns an existing `ScrollSpy` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<ScrollSpy>}\n */\nconst getScrollSpyInstance = (element) => getInstance(element, scrollspyComponent);\n\n/**\n * A `ScrollSpy` initialization callback.\n * @type {BSN.InitCallback<ScrollSpy>}\n */\nconst scrollspyInitCallback = (element) => new ScrollSpy(element);\n\n// SCROLLSPY CUSTOM EVENT\n// ======================\nconst activateScrollSpy = OriginalEvent(`activate.bs.${scrollspyString}`);\n\n// SCROLLSPY PRIVATE METHODS\n// =========================\n/**\n * Update the state of all items.\n * @param {ScrollSpy} self the `ScrollSpy` instance\n */\nfunction updateSpyTargets(self) {\n  const {\n    target, scrollTarget, options, itemsLength, scrollHeight, element,\n  } = self;\n  const { offset } = options;\n  const isWin = scrollTarget instanceof Window;\n\n  const links = target && getElementsByTagName('A', target);\n  const scrollHEIGHT = scrollTarget && getScrollHeight(scrollTarget);\n\n  // @ts-ignore\n  self.scrollTop = isWin ? scrollTarget.scrollY : scrollTarget.scrollTop;\n\n  // only update items/offsets once or with each mutation\n  if (links && (itemsLength !== links.length || scrollHEIGHT !== scrollHeight)) {\n    let href;\n    let targetItem;\n    let rect;\n\n    // reset arrays & update\n    self.items = [];\n    self.offsets = [];\n    self.scrollHeight = scrollHEIGHT;\n    self.maxScroll = self.scrollHeight - getOffsetHeight(self);\n\n    [...links].forEach((link) => {\n      href = getAttribute(link, 'href');\n      targetItem = href && href.charAt(0) === '#' && href.slice(-1) !== '#'\n        && querySelector(href, getDocument(element));\n\n      if (targetItem) {\n        self.items.push(link);\n        rect = targetItem.getBoundingClientRect();\n        // @ts-ignore\n        self.offsets.push((isWin ? rect.top + self.scrollTop : targetItem.offsetTop) - offset);\n      }\n    });\n    self.itemsLength = self.items.length;\n  }\n}\n\n/**\n * Returns the `scrollHeight` property of the scrolling element.\n * @param {HTMLElement | Element | Window | globalThis} scrollTarget the `ScrollSpy` instance\n * @return {number} `scrollTarget` height\n */\nfunction getScrollHeight(scrollTarget) {\n  return scrollTarget instanceof HTMLElement\n    ? scrollTarget.scrollHeight // @ts-ignore\n    : getDocumentElement(scrollTarget).scrollHeight;\n}\n\n/**\n * Returns the height property of the scrolling element.\n * @param {ScrollSpy} params the `ScrollSpy` instance\n * @returns {number}\n */\nfunction getOffsetHeight({ element, scrollTarget }) {\n  return (scrollTarget instanceof Window)\n    ? scrollTarget.innerHeight\n    : getBoundingClientRect(element).height;\n}\n\n/**\n * Clear all items of the target.\n * @param {HTMLElement | Element} target a single item\n */\nfunction clear(target) {\n  [...getElementsByTagName('A', target)].forEach((item) => {\n    if (hasClass(item, activeClass)) removeClass(item, activeClass);\n  });\n}\n\n/**\n * Activates a new item.\n * @param {ScrollSpy} self the `ScrollSpy` instance\n * @param {HTMLElement | Element} item a single item\n */\nfunction activate(self, item) {\n  const { target, element } = self;\n  // @ts-ignore\n  clear(target);\n  // @ts-ignore\n  self.activeItem = item;\n  addClass(item, activeClass);\n\n  // activate all parents\n  const parents = [];\n  let parentItem = item;\n  while (parentItem !== getDocumentBody(element)) {\n    // @ts-ignore\n    parentItem = parentItem.parentElement;\n    if (hasClass(parentItem, 'nav') || hasClass(parentItem, 'dropdown-menu')) parents.push(parentItem);\n  }\n\n  parents.forEach((menuItem) => {\n    /** @type {(HTMLElement | Element)?} */\n    const parentLink = menuItem.previousElementSibling;\n\n    if (parentLink && !hasClass(parentLink, activeClass)) {\n      addClass(parentLink, activeClass);\n    }\n  });\n\n  // dispatch\n  activateScrollSpy.relatedTarget = item;\n  dispatchEvent(element, activateScrollSpy);\n}\n\n/**\n * Toggles on/off the component event listener.\n * @param {ScrollSpy} self the `ScrollSpy` instance\n * @param {boolean=} add when `true`, listener is added\n */\nfunction toggleSpyHandlers(self, add) {\n  const action = add ? on : off;\n  // @ts-ignore\n  action(self.scrollTarget, scrollEvent, self.refresh, passiveHandler);\n}\n\n// SCROLLSPY DEFINITION\n// ====================\n/** Returns a new `ScrollSpy` instance. */\nclass ScrollSpy extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   * @param {BSN.Options.ScrollSpy=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n\n    // initialization element & options\n    const { element, options } = self;\n\n    // additional properties\n    /** @type {(HTMLElement | Element)?} */\n    self.target = querySelector(options.target, getDocument(element));\n\n    // invalidate\n    if (!self.target) return;\n\n    const win = getWindow(element);\n\n    // set initial state\n    /** @type {HTMLElement | Element | Window | globalThis} */\n    self.scrollTarget = element.clientHeight < element.scrollHeight ? element : win;\n    /** @type {number} */\n    self.scrollTop = 0;\n    /** @type {number} */\n    self.maxScroll = 0;\n    /** @type {number} */\n    self.scrollHeight = 0;\n    /** @type {(HTMLElement | Element)?} */\n    self.activeItem = null;\n    /** @type {(HTMLElement | Element)[]} */\n    self.items = [];\n    /** @type {number} */\n    self.itemsLength = 0;\n    /** @type {number[]} */\n    self.offsets = [];\n\n    // bind events\n    self.refresh = self.refresh.bind(self);\n\n    // add event handlers\n    toggleSpyHandlers(self, true);\n\n    self.refresh();\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */\r\n  get name() { return scrollspyComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */\r\n  get defaults() { return scrollspyDefaults; }\r\n  /* eslint-enable */\n\n  // SCROLLSPY PUBLIC METHODS\n  // ========================\n  /** Updates all items. */\n  refresh() {\n    const self = this;\n    const { target } = self;\n\n    // check if target is visible and invalidate\n    // @ts-ignore\n    if (target.offsetHeight === 0) return;\n\n    updateSpyTargets(self);\n\n    const {\n      scrollTop, maxScroll, itemsLength, items, activeItem,\n    } = self;\n\n    if (scrollTop >= maxScroll) {\n      const newActiveItem = items[itemsLength - 1];\n\n      if (activeItem !== newActiveItem) {\n        activate(self, newActiveItem);\n      }\n      return;\n    }\n\n    const { offsets } = self;\n\n    if (activeItem && scrollTop < offsets[0] && offsets[0] > 0) {\n      self.activeItem = null;\n      // @ts-ignore\n      clear(target);\n      return;\n    }\n\n    items.forEach((item, i) => {\n      if (activeItem !== item && scrollTop >= offsets[i]\n        && (typeof offsets[i + 1] === 'undefined' || scrollTop < offsets[i + 1])) {\n        activate(self, item);\n      }\n    });\n  }\n\n  /** Removes `ScrollSpy` from the target element. */\n  dispose() {\n    toggleSpyHandlers(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(ScrollSpy, {\n  selector: scrollspySelector,\n  init: scrollspyInitCallback,\n  getInstance: getScrollSpyInstance,\n});\n\n/**\n * A global namespace for aria-selected.\n * @type {string}\n */\nconst ariaSelected = 'aria-selected';\n\n/** @type {string} */\nconst tabString = 'tab';\n\n/** @type {string} */\nconst tabComponent = 'Tab';\n\n/* Native JavaScript for Bootstrap 5 | Tab\n------------------------------------------ */\n\n// TAB PRIVATE GC\n// ================\nconst tabSelector = `[${dataBsToggle}=\"${tabString}\"]`;\n\n/**\n * Static method which returns an existing `Tab` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Tab>}\n */\nconst getTabInstance = (element) => getInstance(element, tabComponent);\n\n/**\n * A `Tab` initialization callback.\n * @type {BSN.InitCallback<Tab>}\n */\nconst tabInitCallback = (element) => new Tab(element);\n\n// TAB CUSTOM EVENTS\n// =================\nconst showTabEvent = OriginalEvent(`show.bs.${tabString}`);\nconst shownTabEvent = OriginalEvent(`shown.bs.${tabString}`);\nconst hideTabEvent = OriginalEvent(`hide.bs.${tabString}`);\nconst hiddenTabEvent = OriginalEvent(`hidden.bs.${tabString}`);\n\n/**\n * @type {Map<(HTMLElement | Element), any>}\n */\nconst tabPrivate = new Map();\n\n// TAB PRIVATE METHODS\n// ===================\n/**\n * Executes after tab transition has finished.\n * @param {Tab} self the `Tab` instance\n */\nfunction triggerTabEnd(self) {\n  const { tabContent, nav } = self;\n\n  if (tabContent) {\n    // @ts-ignore\n    tabContent.style.height = '';\n    removeClass(tabContent, collapsingClass);\n  }\n\n  if (nav) Timer.clear(nav);\n}\n\n/**\n * Executes before showing the tab content.\n * @param {Tab} self the `Tab` instance\n */\nfunction triggerTabShow(self) {\n  const { element, tabContent, nav } = self;\n  const { currentHeight, nextHeight } = tabPrivate.get(element);\n  const { tab } = nav && tabPrivate.get(nav);\n\n  if (tabContent) { // height animation\n    if (currentHeight === nextHeight) {\n      triggerTabEnd(self);\n    } else {\n      setTimeout(() => { // enables height animation\n        // @ts-ignore\n        tabContent.style.height = `${nextHeight}px`; // height animation\n        reflow(tabContent);\n        emulateTransitionEnd(tabContent, () => triggerTabEnd(self));\n      }, 50);\n    }\n  } else if (nav) Timer.clear(nav);\n  shownTabEvent.relatedTarget = tab;\n  dispatchEvent(element, shownTabEvent);\n}\n\n/**\n * Executes before hiding the tab.\n * @param {Tab} self the `Tab` instance\n */\nfunction triggerTabHide(self) {\n  const {\n    element, content: nextContent, tabContent, nav,\n  } = self;\n  const { tab, content } = nav && tabPrivate.get(nav);\n  let currentHeight = 0;\n\n  if (tabContent) {\n    [content, nextContent].forEach((c) => addClass(c, 'overflow-hidden'));\n    currentHeight = content.scrollHeight;\n  }\n\n  // update relatedTarget and dispatch event\n  showTabEvent.relatedTarget = tab;\n  hiddenTabEvent.relatedTarget = element;\n  dispatchEvent(element, showTabEvent);\n  if (showTabEvent.defaultPrevented) return;\n\n  addClass(nextContent, activeClass);\n  removeClass(content, activeClass);\n\n  if (tabContent) {\n    const nextHeight = nextContent.scrollHeight;\n    tabPrivate.set(element, { currentHeight, nextHeight });\n\n    addClass(tabContent, collapsingClass);\n    // @ts-ignore -- height animation\n    tabContent.style.height = `${currentHeight}px`;\n    reflow(tabContent);\n    [content, nextContent].forEach((c) => removeClass(c, 'overflow-hidden'));\n  }\n\n  if (nextContent && hasClass(nextContent, fadeClass)) {\n    setTimeout(() => {\n      addClass(nextContent, showClass);\n      emulateTransitionEnd(nextContent, () => {\n        triggerTabShow(self);\n      });\n    }, 17);\n  } else { triggerTabShow(self); }\n\n  dispatchEvent(tab, hiddenTabEvent);\n}\n\n/**\n * Returns the current active tab and its target content.\n * @param {Tab} self the `Tab` instance\n * @returns {Record<string, any>} the query result\n */\nfunction getActiveTab(self) {\n  const { nav } = self;\n\n  // @ts-ignore\n  const activeTabs = getElementsByClassName(activeClass, nav);\n  /** @type {(HTMLElement | Element)=} */\n  let tab;\n  if (activeTabs.length === 1\n    // @ts-ignore\n    && !dropdownMenuClasses.some((c) => hasClass(activeTabs[0].parentElement, c))) {\n    [tab] = activeTabs;\n  } else if (activeTabs.length > 1) {\n    tab = activeTabs[activeTabs.length - 1];\n  }\n  const content = tab ? getTargetElement(tab) : null;\n  // @ts-ignore\n  return { tab, content };\n}\n\n/**\n * Toggles on/off the `click` event listener.\n * @param {Tab} self the `Tab` instance\n * @param {boolean=} add when `true`, event listener is added\n */\nfunction toggleTabHandler(self, add) {\n  const action = add ? on : off;\n  action(self.element, mouseclickEvent, tabClickHandler);\n}\n\n// TAB EVENT HANDLER\n// =================\n/**\n * Handles the `click` event listener.\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Event` object\n */\nfunction tabClickHandler(e) {\n  const self = getTabInstance(this);\n  if (!self) return;\n  e.preventDefault();\n\n  self.show();\n}\n\n// TAB DEFINITION\n// ==============\n/** Creates a new `Tab` instance. */\nclass Tab extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target element\n   */\n  constructor(target) {\n    super(target);\n    // bind\n    const self = this;\n\n    // initialization element\n    const { element } = self;\n    const content = getTargetElement(element);\n\n    // no point initializing a tab without a corresponding content\n    if (!content) return;\n\n    const nav = closest(element, '.nav');\n    const container = closest(content, '.tab-content');\n\n    /** @type {(HTMLElement | Element)?} */\n    self.nav = nav;\n    /** @type {HTMLElement | Element} */\n    self.content = content;\n    /** @type {(HTMLElement | Element)?} */\n    self.tabContent = container;\n\n    // event targets\n    /** @type {(HTMLElement | Element)?} */\n    self.dropdown = nav && querySelector(`.${dropdownMenuClasses[0]}-toggle`, nav);\n\n    // add event listener\n    toggleTabHandler(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */  \r\n  get name() { return tabComponent; }\r\n  /* eslint-enable */\n\n  // TAB PUBLIC METHODS\n  // ==================\n  /** Shows the tab to the user. */\n  show() {\n    const self = this;\n    const { element, nav, dropdown } = self;\n\n    if (!(nav && Timer.get(nav)) && !hasClass(element, activeClass)) {\n      const { tab, content } = getActiveTab(self);\n\n      if (nav) tabPrivate.set(nav, { tab, content });\n\n      // update relatedTarget and dispatch\n      hideTabEvent.relatedTarget = element;\n      dispatchEvent(tab, hideTabEvent);\n      if (hideTabEvent.defaultPrevented) return;\n\n      if (nav) Timer.set(nav, () => {}, 17);\n      removeClass(tab, activeClass);\n      setAttribute(tab, ariaSelected, 'false');\n      addClass(element, activeClass);\n      setAttribute(element, ariaSelected, 'true');\n\n      if (dropdown) {\n        // @ts-ignore\n        if (!hasClass(element.parentNode, dropdownMenuClass)) {\n          if (hasClass(dropdown, activeClass)) removeClass(dropdown, activeClass);\n        } else if (!hasClass(dropdown, activeClass)) addClass(dropdown, activeClass);\n      }\n\n      if (hasClass(content, fadeClass)) {\n        removeClass(content, showClass);\n        emulateTransitionEnd(content, () => triggerTabHide(self));\n      } else {\n        triggerTabHide(self);\n      }\n    }\n  }\n\n  /** Removes the `Tab` component from the target element. */\n  dispose() {\n    toggleTabHandler(this);\n    super.dispose();\n  }\n}\n\nObjectAssign(Tab, {\n  selector: tabSelector,\n  init: tabInitCallback,\n  getInstance: getTabInstance,\n});\n\n/** @type {string} */\nconst toastString = 'toast';\n\n/** @type {string} */\nconst toastComponent = 'Toast';\n\n/* Native JavaScript for Bootstrap 5 | Toast\n-------------------------------------------- */\n\n// TOAST PRIVATE GC\n// ================\nconst toastSelector = `.${toastString}`;\nconst toastDismissSelector = `[${dataBsDismiss}=\"${toastString}\"]`;\nconst showingClass = 'showing';\n/** @deprecated */\nconst hideClass = 'hide';\n\nconst toastDefaults = {\n  animation: true,\n  autohide: true,\n  delay: 5000,\n};\n\n/**\n * Static method which returns an existing `Toast` instance associated\n * to a target `Element`.\n *\n * @type {BSN.GetInstance<Toast>}\n */\nconst getToastInstance = (element) => getInstance(element, toastComponent);\n\n/**\n * A `Toast` initialization callback.\n * @type {BSN.InitCallback<Toast>}\n */\nconst toastInitCallback = (element) => new Toast(element);\n\n// TOAST CUSTOM EVENTS\n// ===================\nconst showToastEvent = OriginalEvent(`show.bs.${toastString}`);\nconst shownToastEvent = OriginalEvent(`shown.bs.${toastString}`);\nconst hideToastEvent = OriginalEvent(`hide.bs.${toastString}`);\nconst hiddenToastEvent = OriginalEvent(`hidden.bs.${toastString}`);\n\n// TOAST PRIVATE METHODS\n// =====================\n/**\n * Executes after the toast is shown to the user.\n * @param {Toast} self the `Toast` instance\n */\nfunction showToastComplete(self) {\n  const { element, options } = self;\n  removeClass(element, showingClass);\n  Timer.clear(element, showingClass);\n\n  dispatchEvent(element, shownToastEvent);\n  if (options.autohide) {\n    Timer.set(element, () => self.hide(), options.delay, toastString);\n  }\n}\n\n/**\n * Executes after the toast is hidden to the user.\n * @param {Toast} self the `Toast` instance\n */\nfunction hideToastComplete(self) {\n  const { element } = self;\n  removeClass(element, showingClass);\n  removeClass(element, showClass);\n  addClass(element, hideClass); // B/C\n  Timer.clear(element, toastString);\n  dispatchEvent(element, hiddenToastEvent);\n}\n\n/**\n * Executes before hiding the toast.\n * @param {Toast} self the `Toast` instance\n */\nfunction hideToast(self) {\n  const { element, options } = self;\n  addClass(element, showingClass);\n\n  if (options.animation) {\n    reflow(element);\n    emulateTransitionEnd(element, () => hideToastComplete(self));\n  } else {\n    hideToastComplete(self);\n  }\n}\n\n/**\n * Executes before showing the toast.\n * @param {Toast} self the `Toast` instance\n */\nfunction showToast(self) {\n  const { element, options } = self;\n  Timer.set(element, () => {\n    removeClass(element, hideClass); // B/C\n    reflow(element);\n    addClass(element, showClass);\n    addClass(element, showingClass);\n\n    if (options.animation) {\n      emulateTransitionEnd(element, () => showToastComplete(self));\n    } else {\n      showToastComplete(self);\n    }\n  }, 17, showingClass);\n}\n\n/**\n * Toggles on/off the `click` event listener.\n * @param {Toast} self the `Toast` instance\n * @param {boolean=} add when `true`, it will add the listener\n */\nfunction toggleToastHandlers(self, add) {\n  const action = add ? on : off;\n  const { element, dismiss, options } = self;\n  if (dismiss) {\n    action(dismiss, mouseclickEvent, self.hide);\n  }\n  if (options.autohide) {\n    [focusinEvent, focusoutEvent, mouseenterEvent, mouseleaveEvent]\n      .forEach((e) => action(element, e, interactiveToastHandler));\n  }\n}\n\n// TOAST EVENT HANDLERS\n// ====================\n/**\n * Executes after the instance has been disposed.\n * @param {Toast} self the `Toast` instance\n */\nfunction completeDisposeToast(self) {\n  Timer.clear(self.element, toastString);\n  toggleToastHandlers(self);\n}\n\n/**\n * Executes when user interacts with the toast without closing it,\n * usually by hovering or focusing it.\n *\n * @this {HTMLElement | Element}\n * @param {MouseEvent} e the `Toast` instance\n */\nfunction interactiveToastHandler(e) {\n  const element = this;\n  const self = getToastInstance(element);\n  const { type, relatedTarget } = e;\n  // @ts-ignore\n  if (!self || (element === relatedTarget || element.contains(relatedTarget))) return;\n\n  if ([mouseenterEvent, focusinEvent].includes(type)) {\n    Timer.clear(element, toastString);\n  } else {\n    Timer.set(element, () => self.hide(), self.options.delay, toastString);\n  }\n}\n\n// TOAST DEFINITION\n// ================\n/** Creates a new `Toast` instance. */\nclass Toast extends BaseComponent {\n  /**\n   * @param {HTMLElement | Element | string} target the target `.toast` element\n   * @param {BSN.Options.Toast=} config the instance options\n   */\n  constructor(target, config) {\n    super(target, config);\n    // bind\n    const self = this;\n    const { element, options } = self;\n\n    // set fadeClass, the options.animation will override the markup\n    if (options.animation && !hasClass(element, fadeClass)) addClass(element, fadeClass);\n    else if (!options.animation && hasClass(element, fadeClass)) removeClass(element, fadeClass);\n    // dismiss button\n    /** @type {(HTMLElement | Element)?} */\n    self.dismiss = querySelector(toastDismissSelector, element);\n\n    // bind\n    self.show = self.show.bind(self);\n    self.hide = self.hide.bind(self);\n\n    // add event listener\n    toggleToastHandlers(self, true);\n  }\n\n  /* eslint-disable */\r\n  /**\r\n   * Returns component name string.\r\n   * @readonly @static\r\n   */  \r\n  get name() { return toastComponent; }\r\n  /**\r\n   * Returns component default options.\r\n   * @readonly @static\r\n   */  \r\n  get defaults() { return toastDefaults; }\r\n  /* eslint-enable */\n\n  // TOAST PUBLIC METHODS\n  // ====================\n  /** Shows the toast. */\n  show() {\n    const self = this;\n    const { element } = self;\n    if (element && !hasClass(element, showClass)) {\n      dispatchEvent(element, showToastEvent);\n      if (showToastEvent.defaultPrevented) return;\n\n      showToast(self);\n    }\n  }\n\n  /** Hides the toast. */\n  hide() {\n    const self = this;\n    const { element } = self;\n\n    if (element && hasClass(element, showClass)) {\n      dispatchEvent(element, hideToastEvent);\n      if (hideToastEvent.defaultPrevented) return;\n      hideToast(self);\n    }\n  }\n\n  /** Removes the `Toast` component from the target element. */\n  dispose() {\n    const self = this;\n    const { element } = self;\n\n    if (hasClass(element, showClass)) {\n      removeClass(element, showClass);\n    }\n\n    completeDisposeToast(self);\n\n    super.dispose();\n  }\n}\n\nObjectAssign(Toast, {\n  selector: toastSelector,\n  init: toastInitCallback,\n  getInstance: getToastInstance,\n});\n\n/**\n * Checks if an object is a `CustomElement`.\n *\n * @param {any} element the target object\n * @returns {boolean} the query result\n */\nconst isCustomElement = (element) => element && !!element.shadowRoot;\n\n/**\n * Returns an `Array` of `Node` elements that are registered as\n * `CustomElement`.\n * @see https://stackoverflow.com/questions/27334365/how-to-get-list-of-registered-custom-elements\n *\n * @param {(HTMLElement | Element | Node | Document)=} parent parent to look into\n * @returns {(HTMLElement | Element)[]} the query result\n */\nfunction getCustomElements(parent) {\n  const lookUp = parent && parentNodes.some((x) => parent instanceof x)\n    ? parent : getDocument();\n  // @ts-ignore -- look inside `shadowRoot` node too\n  return [...lookUp.querySelectorAll('*')].filter(isCustomElement);\n}\n\n/** @type {Record<string, any>} */\nconst componentsList = {\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip,\n};\n\nconst componentsKeys = ObjectKeys(componentsList);\n\n/**\n * Initialize all matched `Element`s for one component.\n * @param {BSN.InitCallback<any>} callback the component callback\n * @param {NodeListOf<HTMLElement | Element>} collection the matched collection\n */\nfunction initComponentDataAPI(callback, collection) {\n  [...collection].forEach((x) => callback(x));\n}\n\n/**\n * Remove one component from a target container element or all in the page.\n * @param {string} component the component name\n * @param {(Element | HTMLElement | Document)=} context parent `Element`\n */\nfunction removeComponentDataAPI(component, context) {\n  const compData = Data.getAllFor(component);\n\n  if (compData) {\n    [...compData].forEach((x) => {\n      const [element, instance] = x;\n      if (context && context.contains(element)) instance.dispose();\n    });\n  }\n}\n\n/**\n * Initialize all BSN components for a target container.\n * @param {(Element | HTMLElement | Document)=} context parent `Element`\n */\nfunction initCallback(context) {\n  const lookUp = context && parentNodes.some((x) => context instanceof x)\n    ? context : undefined;\n  const customElementList = getCustomElements(lookUp);\n\n  componentsKeys.forEach((comp) => {\n    const { init, selector } = componentsList[comp];\n    initComponentDataAPI(init, querySelectorAll(selector, lookUp));\n    customElementList\n      // @ts-ignore -- initialize anything inside `CustomElement.shadowRoot`\n      .forEach((ce) => initComponentDataAPI(init, querySelectorAll(selector, ce.shadowRoot)));\n  });\n}\n\n/**\n * Remove all BSN components for a target container.\n * @param {(Element | HTMLElement | Document)=} context parent `Element`\n */\nfunction removeDataAPI(context) {\n  const lookUp = context && parentNodes.some((x) => context instanceof x)\n    ? context : undefined;\n  const customElementList = getCustomElements(lookUp);\n\n  componentsKeys.forEach((comp) => {\n    removeComponentDataAPI(comp, lookUp);\n    // @ts-ignore -- allow `Element.shadowRoot` to initialize\n    customElementList.forEach((ce) => removeComponentDataAPI(comp, ce.shadowRoot));\n  });\n}\n\n// bulk initialize all components\nif (document.body) initCallback();\nelse {\n  document.addEventListener('DOMContentLoaded', () => initCallback(), { once: true });\n}\n\nconst BSN = {\n  Alert,\n  Button,\n  Carousel,\n  Collapse,\n  Dropdown,\n  Modal,\n  Offcanvas,\n  Popover,\n  ScrollSpy,\n  Tab,\n  Toast,\n  Tooltip,\n\n  initCallback,\n  removeDataAPI,\n  Version,\n};\n\nexport { BSN as default };\n","import './sass/main.scss';\nimport BSN from 'bootstrap.native';\n\nconst refs = {\n  modal: document.querySelector('#exampleModal'),\n  subButton: document.querySelector('[data-subscribe]'),\n};\nconst PROMT_DELAY = 1000;\nconst MAX_PROMT_ATTEMPTS = 3;\nlet promtCounter = 0;\nlet hasSubscribed = false;\nconst modal = new BSN.Modal('#exampleModal');\n// console.log(modal);\n\nopenModal();\n\nrefs.modal.addEventListener('hide.bs.modal', openModal);\nrefs.subButton.addEventListener('click', onSubscribeBtnClick);\n\nfunction openModal() {\n  if (promtCounter === MAX_PROMT_ATTEMPTS || hasSubscribed) {\n    console.log('максимальное кол событий или подписался');\n    return;\n  }\n  setTimeout(() => {\n    console.log('Открываем модалку');\n    modal.show();\n    promtCounter += 1;\n  }, PROMT_DELAY);\n}\n\nfunction onSubscribeBtnClick() {\n  hasSubscribed = true;\n  modal.hide();\n}\n"]}